
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e7c  08000e84  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e7c  08000e7c  00010e84  2**0
                  CONTENTS
  4 .ARM          00000000  08000e7c  08000e7c  00010e84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e7c  08000e84  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e7c  08000e7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000e84  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000e84  00020038  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010eae  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001802  00000000  00000000  00010ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000648  00000000  00000000  000126f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00012d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000119  00000000  00000000  00012ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003977  00000000  00000000  00012fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030a4  00000000  00000000  00016960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009886  00000000  00000000  00019a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000004ec  00000000  00000000  0002328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00023778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e64 	.word	0x08000e64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000e64 	.word	0x08000e64

08000204 <SysTick_Handler>:
#include "cpu.h"

static volatile uint32_t us_counter = 0 ;

void SysTick_Handler (void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	us_counter++;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <SysTick_Handler+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <SysTick_Handler+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000001c 	.word	0x2000001c

08000220 <pin_mode>:
 *      Author: moata
 */
#include "gpio.h"

static void pin_mode(pin_t* ret)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if ( ret->mode == pin_mode_input )
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	799b      	ldrb	r3, [r3, #6]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d11f      	bne.n	8000270 <pin_mode+0x50>
	{

		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	2101      	movs	r1, #1
 800023e:	fa01 f303 	lsl.w	r3, r1, r3
 8000242:	43db      	mvns	r3, r3
 8000244:	4619      	mov	r1, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	400a      	ands	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	791b      	ldrb	r3, [r3, #4]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	3301      	adds	r3, #1
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f303 	lsl.w	r3, r1, r3
 8000262:	43db      	mvns	r3, r3
 8000264:	4619      	mov	r1, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	400a      	ands	r2, r1
 800026c:	601a      	str	r2, [r3, #0]
	{
		;
	}


}
 800026e:	e066      	b.n	800033e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_output )
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	799b      	ldrb	r3, [r3, #6]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d11e      	bne.n	80002b6 <pin_mode+0x96>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	791b      	ldrb	r3, [r3, #4]
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	4619      	mov	r1, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	430a      	orrs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	791b      	ldrb	r3, [r3, #4]
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	3301      	adds	r3, #1
 80002a2:	2101      	movs	r1, #1
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	400a      	ands	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	e043      	b.n	800033e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_alternate_fun )
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	799b      	ldrb	r3, [r3, #6]
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d11e      	bne.n	80002fc <pin_mode+0xdc>
		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2101      	movs	r1, #1
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	4619      	mov	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	400a      	ands	r2, r1
 80002da:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	3301      	adds	r3, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	430a      	orrs	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	e020      	b.n	800033e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_analog )
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	799b      	ldrb	r3, [r3, #6]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d11c      	bne.n	800033e <pin_mode+0x11e>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	2101      	movs	r1, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	3301      	adds	r3, #1
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	4619      	mov	r1, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	430a      	orrs	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <pin_outut_type>:

static void pin_outut_type(pin_t* ret)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	if ( ret->otype == pin_push_pull )
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7a5b      	ldrb	r3, [r3, #9]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d10e      	bne.n	8000376 <pin_outut_type+0x2e>
	{

		ret->port->GPIOx_OTYPER &= ~(1<<(ret->pin));
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	4619      	mov	r1, r3
 8000364:	2301      	movs	r3, #1
 8000366:	408b      	lsls	r3, r1
 8000368:	43db      	mvns	r3, r3
 800036a:	4619      	mov	r1, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	400a      	ands	r2, r1
 8000372:	605a      	str	r2, [r3, #4]
	{
		;
	}


}
 8000374:	e010      	b.n	8000398 <pin_outut_type+0x50>
	else if ( ret->otype == pin_open_drain )
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	7a5b      	ldrb	r3, [r3, #9]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10c      	bne.n	8000398 <pin_outut_type+0x50>
		ret->port->GPIOx_OTYPER |= (1<<(ret->pin));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	4619      	mov	r1, r3
 800038a:	2301      	movs	r3, #1
 800038c:	408b      	lsls	r3, r1
 800038e:	4619      	mov	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	430a      	orrs	r2, r1
 8000396:	605a      	str	r2, [r3, #4]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr

080003a2 <pin_pull_type>:

static void pin_pull_type(pin_t* ret)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
	if ( ret->pupd == no_pull )
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	79db      	ldrb	r3, [r3, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d11f      	bne.n	80003f2 <pin_pull_type+0x50>
	{

		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	68da      	ldr	r2, [r3, #12]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	43db      	mvns	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	400a      	ands	r2, r1
 80003ce:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	791b      	ldrb	r3, [r3, #4]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	3301      	adds	r3, #1
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	43db      	mvns	r3, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	400a      	ands	r2, r1
 80003ee:	60da      	str	r2, [r3, #12]
	{
		;
	}


}
 80003f0:	e044      	b.n	800047c <pin_pull_type+0xda>
	else if ( ret->pupd == pull_up )
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	79db      	ldrb	r3, [r3, #7]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d11e      	bne.n	8000438 <pin_pull_type+0x96>
		ret->port->GPIOx_PUPDR |= (1<<((ret->pin)*2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	2101      	movs	r1, #1
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	4619      	mov	r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	430a      	orrs	r2, r1
 8000414:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68da      	ldr	r2, [r3, #12]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	791b      	ldrb	r3, [r3, #4]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	3301      	adds	r3, #1
 8000424:	2101      	movs	r1, #1
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43db      	mvns	r3, r3
 800042c:	4619      	mov	r1, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	400a      	ands	r2, r1
 8000434:	60da      	str	r2, [r3, #12]
}
 8000436:	e021      	b.n	800047c <pin_pull_type+0xda>
	else if ( ret->pupd == pull_down )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	79db      	ldrb	r3, [r3, #7]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d11d      	bne.n	800047c <pin_pull_type+0xda>
		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68da      	ldr	r2, [r3, #12]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43db      	mvns	r3, r3
 8000454:	4619      	mov	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	400a      	ands	r2, r1
 800045c:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR |= (1<<(((ret->pin)*2)+1));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	3301      	adds	r3, #1
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	430a      	orrs	r2, r1
 800047a:	60da      	str	r2, [r3, #12]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <pin_init>:

pin_t pin_init(volatile gpio_t* port, gpio_pin_t pin, pin_mode_t mode, pin_output_type_t otype, pin_pull_t pupd )
{
 8000486:	b590      	push	{r4, r7, lr}
 8000488:	b089      	sub	sp, #36	; 0x24
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	4611      	mov	r1, r2
 8000492:	461a      	mov	r2, r3
 8000494:	460b      	mov	r3, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]
	pin_t ret ;
	ret.port = port;
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	617b      	str	r3, [r7, #20]
	ret.mode = mode;
 80004a0:	79bb      	ldrb	r3, [r7, #6]
 80004a2:	76bb      	strb	r3, [r7, #26]
	ret.pupd = pupd ;
 80004a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80004a8:	76fb      	strb	r3, [r7, #27]
	ret.otype = otype;
 80004aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004ae:	777b      	strb	r3, [r7, #29]
	ret.pin = pin;
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	763b      	strb	r3, [r7, #24]


	pin_mode(&ret);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff feb1 	bl	8000220 <pin_mode>
	pin_pull_type(&ret);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff6d 	bl	80003a2 <pin_pull_type>
	pin_outut_type(&ret);
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff3b 	bl	8000348 <pin_outut_type>



	return ret ;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	461c      	mov	r4, r3
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80004e2:	68f8      	ldr	r0, [r7, #12]
 80004e4:	3724      	adds	r7, #36	; 0x24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd90      	pop	{r4, r7, pc}

080004ea <pin_level>:


void pin_level(pin_t *ret , uint8_t level)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	70fb      	strb	r3, [r7, #3]

	if ( level == pin_high)
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d109      	bne.n	8000510 <pin_level+0x26>
	{
		ret->port->GPIOx_BSRR = (1<<ret->pin);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	461a      	mov	r2, r3
 8000502:	2301      	movs	r3, #1
 8000504:	fa03 f202 	lsl.w	r2, r3, r2
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	619a      	str	r2, [r3, #24]
	}
	else
	{
		;
	}
}
 800050e:	e00a      	b.n	8000526 <pin_level+0x3c>
	else if (level == pin_low)
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d107      	bne.n	8000526 <pin_level+0x3c>
		ret->port->GPIOx_BSRR = (1<<((ret->pin)+16));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	3310      	adds	r3, #16
 800051c:	2201      	movs	r2, #1
 800051e:	409a      	lsls	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	619a      	str	r2, [r3, #24]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <timer_basic_new>:

#include "gpt.h"


tim_use_t timer_basic_new(volatile gpt_registers_t* timx, tim_uint_t uintx,tim_update_int_t update_intx,uint8_t tim_clk_mhzx, uint16_t event_flagx)
{
 8000530:	b490      	push	{r4, r7}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	460b      	mov	r3, r1
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	4613      	mov	r3, r2
 8000544:	71bb      	strb	r3, [r7, #6]
	tim_use_t tim ;
	tim.timer = timx;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	617b      	str	r3, [r7, #20]
	tim.config.uint = uintx;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	773b      	strb	r3, [r7, #28]
	tim.config.update_int = update_intx ;
 800054e:	79bb      	ldrb	r3, [r7, #6]
 8000550:	777b      	strb	r3, [r7, #29]
	tim.config.event_flag = event_flagx;
 8000552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000554:	837b      	strh	r3, [r7, #26]
	tim.config.tim_clk_mhz = tim_clk_mhzx ;
 8000556:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800055a:	767b      	strb	r3, [r7, #25]

	return (tim);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	461c      	mov	r4, r3
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bc90      	pop	{r4, r7}
 8000574:	4770      	bx	lr
	...

08000578 <timer_basic_init>:


void timer_basic_init(tim_use_t* timer)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	// Bit 0 CEN: Counter enable == 0: Counter disabled
		timer->timer->TIMx_CR1 &= ~(1<<CEN);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f022 0201 	bic.w	r2, r2, #1
 800058e:	601a      	str	r2, [r3, #0]

	//Bit 1 UDIS: Update disable == 0: UEV enabled
		timer->timer->TIMx_CR1 &= ~(1<<UDIS);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f022 0202 	bic.w	r2, r2, #2
 800059e:	601a      	str	r2, [r3, #0]

	//Bit 2 URS: Update request source == 1: Only counter overflow/underflow generates an update interrupt
		timer->timer->TIMx_CR1 |= (1<<URS);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f042 0204 	orr.w	r2, r2, #4
 80005ae:	601a      	str	r2, [r3, #0]

	//Bit 3 OPM: One-pulse mode == 0: Counter is not stopped at update event
		timer->timer->TIMx_CR1 &= ~(1<<OPM);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f022 0208 	bic.w	r2, r2, #8
 80005be:	601a      	str	r2, [r3, #0]

	//Bit 4 DIR: Direction == 1: Counter used as down counter
		timer->timer->TIMx_CR1 |= (1<<DIR);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f042 0210 	orr.w	r2, r2, #16
 80005ce:	601a      	str	r2, [r3, #0]

	//Bits 6:5 CMS: Center-aligned mode selection == 00: Edge-aligned mode.
		timer->timer->TIMx_CR1 &= ~(1<<CMS0);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 0220 	bic.w	r2, r2, #32
 80005de:	601a      	str	r2, [r3, #0]
		timer->timer->TIMx_CR1 &= ~(1<<CMS1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80005ee:	601a      	str	r2, [r3, #0]

	//Bit 7 ARPE: Auto-reload preload enable == 1: TIMx_ARR register is buffered
		timer->timer->TIMx_CR1 |= (1<<ARPE);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005fe:	601a      	str	r2, [r3, #0]

	// Update interrupt enable  ||  Update interrupt disabled
	if (timer->config.update_int == tim_update_int_enable)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a5b      	ldrb	r3, [r3, #9]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d108      	bne.n	800061a <timer_basic_init+0xa2>
	{
		// Bit 0 UIE: Update interrupt enable == 1: Update interrupt enabled
			timer->timer->TIMx_DIER |= (1<<UIE);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0201 	orr.w	r2, r2, #1
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	e00f      	b.n	800063a <timer_basic_init+0xc2>
	}
	else if (timer->config.update_int == tim_update_int_disable)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7a5b      	ldrb	r3, [r3, #9]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d108      	bne.n	8000634 <timer_basic_init+0xbc>
	{
		// Bit 0 UIE: Update interrupt enable == 0: Update interrupt disabled
			timer->timer->TIMx_DIER &= ~(1<<UIE);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f022 0201 	bic.w	r2, r2, #1
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	e002      	b.n	800063a <timer_basic_init+0xc2>
	}
	else
	{
		timer->config.update_int = TIM_NULL;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	725a      	strb	r2, [r3, #9]
	}
	// Bits 15:0 CNT[15:0]: Counter value
	// TIM3 & TIM4 = 16bit  CNT = 0xFFFF
	if ((timer->timer == TIM3)|| (timer->timer == TIM4))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <timer_basic_init+0x16c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d004      	beq.n	800064e <timer_basic_init+0xd6>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <timer_basic_init+0x170>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d105      	bne.n	800065a <timer_basic_init+0xe2>
	{
		timer->timer->TIMx_CNT = 0xFFFF ;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
 8000658:	e014      	b.n	8000684 <timer_basic_init+0x10c>
	}
	// TIM2 & TIM5 = 32bit  CNT = 0xFFFFFFFF
	else if ((timer->timer == TIM2)|| (timer->timer == TIM5))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000662:	d004      	beq.n	800066e <timer_basic_init+0xf6>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <timer_basic_init+0x174>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d105      	bne.n	800067a <timer_basic_init+0x102>
	{
		timer->timer->TIMx_CNT = 0xFFFFFFFF ;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f04f 32ff 	mov.w	r2, #4294967295
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
 8000678:	e004      	b.n	8000684 <timer_basic_init+0x10c>
	}
	else
	{
		timer->timer->TIMx_CNT = TIM_NULL;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f04f 32ff 	mov.w	r2, #4294967295
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	// choose uint time used us | ms
	////Set tick time to be 0.5 uS
	if (timer->config.uint == tim_uint_us)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7a1b      	ldrb	r3, [r3, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10d      	bne.n	80006a8 <timer_basic_init+0x130>
	{
		timer->timer->TIMx_PSC = ((timer->config.tim_clk_mhz)/2);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	795b      	ldrb	r3, [r3, #5]
 8000690:	085b      	lsrs	r3, r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
		timer->timer->TIMx_ARR = (2*(timer->config.event_flag));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	88db      	ldrh	r3, [r3, #6]
 800069e:	005a      	lsls	r2, r3, #1
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
		timer->config.uint = TIM_NULL;
	}



}
 80006a6:	e017      	b.n	80006d8 <timer_basic_init+0x160>
	else if (timer->config.uint == tim_uint_ms)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7a1b      	ldrb	r3, [r3, #8]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d110      	bne.n	80006d2 <timer_basic_init+0x15a>
		timer->timer->TIMx_PSC = ((timer->config.tim_clk_mhz)*1000/2);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	461a      	mov	r2, r3
 80006b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ba:	fb03 f202 	mul.w	r2, r3, r2
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
		timer->timer->TIMx_ARR = (2*(timer->config.event_flag));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	88db      	ldrh	r3, [r3, #6]
 80006c8:	005a      	lsls	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006d0:	e002      	b.n	80006d8 <timer_basic_init+0x160>
		timer->config.uint = TIM_NULL;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	721a      	strb	r2, [r3, #8]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40000400 	.word	0x40000400
 80006e8:	40000800 	.word	0x40000800
 80006ec:	40001000 	.word	0x40001000

080006f0 <timer_start>:

void timer_start(tim_use_t* timer)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	//TIMx control register 1 (TIMx_CR1) == 1: Counter enabled
		timer->timer->TIMx_CR1 |= (1<<CEN);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f042 0201 	orr.w	r2, r2, #1
 8000706:	601a      	str	r2, [r3, #0]

}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b08      	cmp	r3, #8
 8000722:	f200 80f6 	bhi.w	8000912 <AHB_PRE_SELECT+0x1fe>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <AHB_PRE_SELECT+0x18>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000751 	.word	0x08000751
 8000730:	08000783 	.word	0x08000783
 8000734:	080007b5 	.word	0x080007b5
 8000738:	080007e7 	.word	0x080007e7
 800073c:	08000819 	.word	0x08000819
 8000740:	0800084b 	.word	0x0800084b
 8000744:	0800087d 	.word	0x0800087d
 8000748:	080008af 	.word	0x080008af
 800074c:	080008e1 	.word	0x080008e1
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000750:	4b7f      	ldr	r3, [pc, #508]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	4a7e      	ldr	r2, [pc, #504]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000756:	f023 0310 	bic.w	r3, r3, #16
 800075a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800075c:	4b7c      	ldr	r3, [pc, #496]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4a7b      	ldr	r2, [pc, #492]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000762:	f023 0320 	bic.w	r3, r3, #32
 8000766:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000768:	4b79      	ldr	r3, [pc, #484]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a78      	ldr	r2, [pc, #480]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800076e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000772:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8000774:	4b76      	ldr	r3, [pc, #472]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	4a75      	ldr	r2, [pc, #468]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800077a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800077e:	6093      	str	r3, [r2, #8]
		break;
 8000780:	e0e0      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000782:	4b73      	ldr	r3, [pc, #460]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	4a72      	ldr	r2, [pc, #456]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000788:	f023 0310 	bic.w	r3, r3, #16
 800078c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800078e:	4b70      	ldr	r3, [pc, #448]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	4a6f      	ldr	r2, [pc, #444]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000794:	f023 0320 	bic.w	r3, r3, #32
 8000798:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800079a:	4b6d      	ldr	r3, [pc, #436]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	4a6c      	ldr	r2, [pc, #432]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007a4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80007a6:	4b6a      	ldr	r3, [pc, #424]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	4a69      	ldr	r2, [pc, #420]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6093      	str	r3, [r2, #8]
		break;
 80007b2:	e0c7      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80007b4:	4b66      	ldr	r3, [pc, #408]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4a65      	ldr	r2, [pc, #404]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80007c0:	4b63      	ldr	r3, [pc, #396]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a62      	ldr	r2, [pc, #392]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007c6:	f023 0320 	bic.w	r3, r3, #32
 80007ca:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80007cc:	4b60      	ldr	r3, [pc, #384]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4a5f      	ldr	r2, [pc, #380]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007d6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80007d8:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4a5c      	ldr	r2, [pc, #368]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e2:	6093      	str	r3, [r2, #8]
		break;
 80007e4:	e0ae      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80007e6:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	4a59      	ldr	r2, [pc, #356]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007ec:	f023 0310 	bic.w	r3, r3, #16
 80007f0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	4a56      	ldr	r2, [pc, #344]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80007fe:	4b54      	ldr	r3, [pc, #336]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	4a53      	ldr	r2, [pc, #332]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800080a:	4b51      	ldr	r3, [pc, #324]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4a50      	ldr	r2, [pc, #320]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6093      	str	r3, [r2, #8]
		break;
 8000816:	e095      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000818:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a4c      	ldr	r2, [pc, #304]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8000824:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a49      	ldr	r2, [pc, #292]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a46      	ldr	r2, [pc, #280]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800083a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800083c:	4b44      	ldr	r3, [pc, #272]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a43      	ldr	r2, [pc, #268]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000846:	6093      	str	r3, [r2, #8]
		break;
 8000848:	e07c      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a40      	ldr	r2, [pc, #256]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000850:	f023 0310 	bic.w	r3, r3, #16
 8000854:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	4a3d      	ldr	r2, [pc, #244]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800085c:	f023 0320 	bic.w	r3, r3, #32
 8000860:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4a3a      	ldr	r2, [pc, #232]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4a37      	ldr	r2, [pc, #220]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6093      	str	r3, [r2, #8]
		break;
 800087a:	e063      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a33      	ldr	r2, [pc, #204]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800089a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008aa:	6093      	str	r3, [r2, #8]
		break;
 80008ac:	e04a      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008b4:	f023 0310 	bic.w	r3, r3, #16
 80008b8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6093      	str	r3, [r2, #8]
		break;
 80008de:	e031      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 80008fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000902:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	6093      	str	r3, [r2, #8]
		break;
 8000910:	e018      	b.n	8000944 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000918:	f023 0310 	bic.w	r3, r3, #16
 800091c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000924:	f023 0320 	bic.w	r3, r3, #32
 8000928:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000934:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <AHB_PRE_SELECT+0x23c>)
 800093c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000940:	6093      	str	r3, [r2, #8]
		break;
 8000942:	bf00      	nop
	}
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d86c      	bhi.n	8000a3e <APB1_PRE_SELECT+0xea>
 8000964:	a201      	add	r2, pc, #4	; (adr r2, 800096c <APB1_PRE_SELECT+0x18>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	08000981 	.word	0x08000981
 8000970:	080009a7 	.word	0x080009a7
 8000974:	080009cd 	.word	0x080009cd
 8000978:	080009f3 	.word	0x080009f3
 800097c:	08000a19 	.word	0x08000a19
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000980:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800098a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800098c:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4a2e      	ldr	r2, [pc, #184]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000996:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 8000998:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 800099e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a2:	6093      	str	r3, [r2, #8]
		break;
 80009a4:	e04c      	b.n	8000a40 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009b0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009bc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c8:	6093      	str	r3, [r2, #8]
		break;
 80009ca:	e039      	b.n	8000a40 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009e2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ee:	6093      	str	r3, [r2, #8]
		break;
 80009f0:	e026      	b.n	8000a40 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 80009f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009fc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a08:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a14:	6093      	str	r3, [r2, #8]
		break;
 8000a16:	e013      	b.n	8000a40 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <APB1_PRE_SELECT+0xf8>)
 8000a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3a:	6093      	str	r3, [r2, #8]
		break;
 8000a3c:	e000      	b.n	8000a40 <APB1_PRE_SELECT+0xec>
	default:
		break;
 8000a3e:	bf00      	nop
	}
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d86c      	bhi.n	8000b3a <APB2_PRE_SELECT+0xea>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <APB2_PRE_SELECT+0x18>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a7d 	.word	0x08000a7d
 8000a6c:	08000aa3 	.word	0x08000aa3
 8000a70:	08000ac9 	.word	0x08000ac9
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000b15 	.word	0x08000b15
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000a7c:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a86:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a92:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000a9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a9e:	6093      	str	r3, [r2, #8]
		break;
 8000aa0:	e04c      	b.n	8000b3c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aac:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ab8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac4:	6093      	str	r3, [r2, #8]
		break;
 8000ac6:	e039      	b.n	8000b3c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ade:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aea:	6093      	str	r3, [r2, #8]
		break;
 8000aec:	e026      	b.n	8000b3c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000af8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b10:	6093      	str	r3, [r2, #8]
		break;
 8000b12:	e013      	b.n	8000b3c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b1e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <APB2_PRE_SELECT+0xf8>)
 8000b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b36:	6093      	str	r3, [r2, #8]
		break;
 8000b38:	e000      	b.n	8000b3c <APB2_PRE_SELECT+0xec>
	default:
		break;
 8000b3a:	bf00      	nop
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <rcc_sys_init_pllr_32MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
}

void rcc_sys_init_pllr_32MHz_all(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 64 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 8000b50:	4b5e      	ldr	r3, [pc, #376]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b56:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000b5a:	6053      	str	r3, [r2, #4]

	//Q = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 8000b5c:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	4a5a      	ldr	r2, [pc, #360]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b66:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ1);
 8000b68:	4b58      	ldr	r3, [pc, #352]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b72:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ2);
 8000b74:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	4a54      	ldr	r2, [pc, #336]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b7e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8000b80:	4b52      	ldr	r3, [pc, #328]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a51      	ldr	r2, [pc, #324]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b86:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000b8a:	6053      	str	r3, [r2, #4]

	//R = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLR0);
 8000b8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	4a4e      	ldr	r2, [pc, #312]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLR1);
 8000b98:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ba2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLR2);
 8000ba4:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a48      	ldr	r2, [pc, #288]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000baa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000bae:	6053      	str	r3, [r2, #4]

	//N = 64 >> 0b00100 0000
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8000bb0:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bba:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8000bbc:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a42      	ldr	r2, [pc, #264]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000bc6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN2);
 8000bc8:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bd2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8000bd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bde:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN4);
 8000be0:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a39      	ldr	r2, [pc, #228]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bea:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000bf6:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c02:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8000c04:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c0e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c1a:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c22:	f023 0301 	bic.w	r3, r3, #1
 8000c26:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c2e:	f023 0302 	bic.w	r3, r3, #2
 8000c32:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c3a:	f023 0304 	bic.w	r3, r3, #4
 8000c3e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c52:	f023 0310 	bic.w	r3, r3, #16
 8000c56:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c5e:	f023 0320 	bic.w	r3, r3, #32
 8000c62:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 32MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff fd55 	bl	8000714 <AHB_PRE_SELECT>

	//APB1 prescaler /1  32MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fe72 	bl	8000954 <APB1_PRE_SELECT>

	//APB2 prescaler /1  32MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff feed 	bl	8000a50 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c80:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8000c82:	bf00      	nop
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f9      	beq.n	8000c84 <rcc_sys_init_pllr_32MHz_all+0x138>

	//System clock switch >> HSI oscillator selected as system clock
	set_bit(RCC->RCC_CFGR,SW0);
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
 8000ca8:	bf00      	nop
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	f003 0202 	and.w	r2, r3, #2
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d1f1      	bne.n	8000caa <rcc_sys_init_pllr_32MHz_all+0x15e>
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <rcc_ahb1_clk_enable>:

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <rcc_ahb1_clk_enable+0x28>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <rcc_ahb1_clk_enable+0x28>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	40023800 	.word	0x40023800

08000cfc <rcc_apb1_clk_enable>:
void rcc_ahb3_clk_enable(rcc_ahb3_peripherals peripheral)
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}
void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <rcc_apb1_clk_enable+0x28>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <rcc_apb1_clk_enable+0x28>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40023800 	.word	0x40023800

08000d28 <main>:
#endif

tim_use_t timer2 ;
pin_t led ;
int main(void)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af02      	add	r7, sp, #8
	rcc_sys_init_pllr_32MHz_all();
 8000d2e:	f7ff ff0d 	bl	8000b4c <rcc_sys_init_pllr_32MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff ffcc 	bl	8000cd0 <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_TIM2);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ffdf 	bl	8000cfc <rcc_apb1_clk_enable>

	timer2 = timer_basic_new(TIM2, tim_uint_ms, tim_update_int_disable, 32 , 1000);
 8000d3e:	4c16      	ldr	r4, [pc, #88]	; (8000d98 <main+0x70>)
 8000d40:	4638      	mov	r0, r7
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2320      	movs	r3, #32
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d54:	f7ff fbec 	bl	8000530 <timer_basic_new>
 8000d58:	463b      	mov	r3, r7
 8000d5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 led = pin_init(GPIOA, gpio_pin5, pin_mode_output, pin_push_pull, no_pull);
 8000d62:	4c0e      	ldr	r4, [pc, #56]	; (8000d9c <main+0x74>)
 8000d64:	4638      	mov	r0, r7
 8000d66:	2300      	movs	r3, #0
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2205      	movs	r2, #5
 8000d72:	490b      	ldr	r1, [pc, #44]	; (8000da0 <main+0x78>)
 8000d74:	f7ff fb87 	bl	8000486 <pin_init>
 8000d78:	463b      	mov	r3, r7
 8000d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	timer_basic_init(&timer2);
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <main+0x70>)
 8000d84:	f7ff fbf8 	bl	8000578 <timer_basic_init>

	timer_start(&timer2);
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <main+0x70>)
 8000d8a:	f7ff fcb1 	bl	80006f0 <timer_start>

	/* Loop forever */
	while (1)
	{

		pin_level(&led, pin_low);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <main+0x74>)
 8000d92:	f7ff fbaa 	bl	80004ea <pin_level>
 8000d96:	e7fa      	b.n	8000d8e <main+0x66>
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	2000002c 	.word	0x2000002c
 8000da0:	40020000 	.word	0x40020000

08000da4 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler (void)
	{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
		pin_level(&led, pin_high);
 8000da8:	2101      	movs	r1, #1
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <TIM2_IRQHandler+0x20>)
 8000dac:	f7ff fb9d 	bl	80004ea <pin_level>

		timer_UIF_flag_clear(TIM2);
 8000db0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	6113      	str	r3, [r2, #16]
	}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000002c 	.word	0x2000002c

08000dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dcc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000df6:	f000 f811 	bl	8000e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff ff95 	bl	8000d28 <main>

08000dfe <LoopForever>:

LoopForever:
  b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   r0, =_estack
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e0c:	08000e84 	.word	0x08000e84
  ldr r2, =_sbss
 8000e10:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e14:	20000038 	.word	0x20000038

08000e18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <__libc_init_array>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	4d0d      	ldr	r5, [pc, #52]	; (8000e54 <__libc_init_array+0x38>)
 8000e20:	4c0d      	ldr	r4, [pc, #52]	; (8000e58 <__libc_init_array+0x3c>)
 8000e22:	1b64      	subs	r4, r4, r5
 8000e24:	10a4      	asrs	r4, r4, #2
 8000e26:	2600      	movs	r6, #0
 8000e28:	42a6      	cmp	r6, r4
 8000e2a:	d109      	bne.n	8000e40 <__libc_init_array+0x24>
 8000e2c:	4d0b      	ldr	r5, [pc, #44]	; (8000e5c <__libc_init_array+0x40>)
 8000e2e:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <__libc_init_array+0x44>)
 8000e30:	f000 f818 	bl	8000e64 <_init>
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	2600      	movs	r6, #0
 8000e3a:	42a6      	cmp	r6, r4
 8000e3c:	d105      	bne.n	8000e4a <__libc_init_array+0x2e>
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e44:	4798      	blx	r3
 8000e46:	3601      	adds	r6, #1
 8000e48:	e7ee      	b.n	8000e28 <__libc_init_array+0xc>
 8000e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4e:	4798      	blx	r3
 8000e50:	3601      	adds	r6, #1
 8000e52:	e7f2      	b.n	8000e3a <__libc_init_array+0x1e>
 8000e54:	08000e7c 	.word	0x08000e7c
 8000e58:	08000e7c 	.word	0x08000e7c
 8000e5c:	08000e7c 	.word	0x08000e7c
 8000e60:	08000e80 	.word	0x08000e80

08000e64 <_init>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	bf00      	nop
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr

08000e70 <_fini>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr
