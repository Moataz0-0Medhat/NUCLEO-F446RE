
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd0  08000cd8  00010cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00010cd8  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  00010cd8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd8  00010cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000cd8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000cd8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010cd8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001006  00000000  00000000  00010d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e3  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  000121f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00012328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c4b  00000000  00000000  00012418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000256c  00000000  00000000  00015063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005914  00000000  00000000  000175cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001cee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003a8  00000000  00000000  0001cf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000cb8 	.word	0x08000cb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000cb8 	.word	0x08000cb8

08000204 <SysTick_Handler>:
#include "cpu.h"

static volatile uint32_t us_counter = 0 ;

void SysTick_Handler (void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	us_counter++;
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <SysTick_Handler+0x18>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	4a03      	ldr	r2, [pc, #12]	; (800021c <SysTick_Handler+0x18>)
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	2000001c 	.word	0x2000001c

08000220 <sys_delay_init>:

void sys_delay_init(uint32_t sys_clk)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	//   1. Program reload value. (1us)
	SYST_RVR = (sys_clk/ 1000000) - 1;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4a10      	ldr	r2, [pc, #64]	; (800026c <sys_delay_init+0x4c>)
 800022c:	fba2 2303 	umull	r2, r3, r2, r3
 8000230:	0c9b      	lsrs	r3, r3, #18
 8000232:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <sys_delay_init+0x50>)
 8000234:	3b01      	subs	r3, #1
 8000236:	6013      	str	r3, [r2, #0]

	// 2. Clear current value.
	SYST_CVR = 0;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <sys_delay_init+0x54>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
	// 3. Program Control and Status register.

	// 3.1 clock source: is processor clock
	set_bit(SYST_CSR,2);
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <sys_delay_init+0x58>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <sys_delay_init+0x58>)
 8000244:	f043 0304 	orr.w	r3, r3, #4
 8000248:	6013      	str	r3, [r2, #0]

	// 3.2 disable SysTick exception request:
	clr_bit(SYST_CSR,1);
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <sys_delay_init+0x58>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <sys_delay_init+0x58>)
 8000250:	f023 0302 	bic.w	r3, r3, #2
 8000254:	6013      	str	r3, [r2, #0]

	// 3.3 Enable the counter:
	set_bit(SYST_CSR,0);
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <sys_delay_init+0x58>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <sys_delay_init+0x58>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6013      	str	r3, [r2, #0]

}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	431bde83 	.word	0x431bde83
 8000270:	e000e014 	.word	0xe000e014
 8000274:	e000e018 	.word	0xe000e018
 8000278:	e000e010 	.word	0xe000e010

0800027c <delay_us>:

void delay_us(uint32_t us)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

	// 1. Clear us_counter value.
	us_counter = 0 ;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <delay_us+0x28>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
	while(us_counter < us );
 800028a:	bf00      	nop
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <delay_us+0x28>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	429a      	cmp	r2, r3
 8000294:	d8fa      	bhi.n	800028c <delay_us+0x10>

}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <delay_ms>:

void delay_ms(uint32_t ms)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	delay_us(ms*1000);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b6:	fb02 f303 	mul.w	r3, r2, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ffde 	bl	800027c <delay_us>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <pin_mode>:
 *      Author: moata
 */
#include "gpio.h"

static void pin_mode(pin_t* ret)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	if ( ret->mode == pin_mode_input )
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	799b      	ldrb	r3, [r3, #6]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d11f      	bne.n	8000318 <pin_mode+0x50>
	{

		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43db      	mvns	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	400a      	ands	r2, r1
 80002f4:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	3301      	adds	r3, #1
 8000304:	2101      	movs	r1, #1
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	43db      	mvns	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	400a      	ands	r2, r1
 8000314:	601a      	str	r2, [r3, #0]
	{
		;
	}


}
 8000316:	e066      	b.n	80003e6 <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_output )
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	799b      	ldrb	r3, [r3, #6]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d11e      	bne.n	800035e <pin_mode+0x96>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	2101      	movs	r1, #1
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	4619      	mov	r1, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	430a      	orrs	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	3301      	adds	r3, #1
 800034a:	2101      	movs	r1, #1
 800034c:	fa01 f303 	lsl.w	r3, r1, r3
 8000350:	43db      	mvns	r3, r3
 8000352:	4619      	mov	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	400a      	ands	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	e043      	b.n	80003e6 <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_alternate_fun )
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	799b      	ldrb	r3, [r3, #6]
 8000362:	2b02      	cmp	r3, #2
 8000364:	d11e      	bne.n	80003a4 <pin_mode+0xdc>
		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f303 	lsl.w	r3, r1, r3
 8000378:	43db      	mvns	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	400a      	ands	r2, r1
 8000382:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	3301      	adds	r3, #1
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	4619      	mov	r1, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	430a      	orrs	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	e020      	b.n	80003e6 <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_analog )
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	799b      	ldrb	r3, [r3, #6]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d11c      	bne.n	80003e6 <pin_mode+0x11e>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	3301      	adds	r3, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <pin_outut_type>:

static void pin_outut_type(pin_t* ret)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	if ( ret->otype == pin_push_pull )
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	7a5b      	ldrb	r3, [r3, #9]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10e      	bne.n	800041e <pin_outut_type+0x2e>
	{

		ret->port->GPIOx_OTYPER &= ~(1<<(ret->pin));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	4619      	mov	r1, r3
 800040c:	2301      	movs	r3, #1
 800040e:	408b      	lsls	r3, r1
 8000410:	43db      	mvns	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	400a      	ands	r2, r1
 800041a:	605a      	str	r2, [r3, #4]
	{
		;
	}


}
 800041c:	e010      	b.n	8000440 <pin_outut_type+0x50>
	else if ( ret->otype == pin_open_drain )
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7a5b      	ldrb	r3, [r3, #9]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10c      	bne.n	8000440 <pin_outut_type+0x50>
		ret->port->GPIOx_OTYPER |= (1<<(ret->pin));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	4619      	mov	r1, r3
 8000432:	2301      	movs	r3, #1
 8000434:	408b      	lsls	r3, r1
 8000436:	4619      	mov	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	430a      	orrs	r2, r1
 800043e:	605a      	str	r2, [r3, #4]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <pin_pull_type>:

static void pin_pull_type(pin_t* ret)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	if ( ret->pupd == no_pull )
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	79db      	ldrb	r3, [r3, #7]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d11f      	bne.n	800049a <pin_pull_type+0x50>
	{

		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2101      	movs	r1, #1
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	400a      	ands	r2, r1
 8000476:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	3301      	adds	r3, #1
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	400a      	ands	r2, r1
 8000496:	60da      	str	r2, [r3, #12]
	{
		;
	}


}
 8000498:	e044      	b.n	8000524 <pin_pull_type+0xda>
	else if ( ret->pupd == pull_up )
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	79db      	ldrb	r3, [r3, #7]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d11e      	bne.n	80004e0 <pin_pull_type+0x96>
		ret->port->GPIOx_PUPDR |= (1<<((ret->pin)*2));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68da      	ldr	r2, [r3, #12]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	430a      	orrs	r2, r1
 80004bc:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68da      	ldr	r2, [r3, #12]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	3301      	adds	r3, #1
 80004cc:	2101      	movs	r1, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	43db      	mvns	r3, r3
 80004d4:	4619      	mov	r1, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	400a      	ands	r2, r1
 80004dc:	60da      	str	r2, [r3, #12]
}
 80004de:	e021      	b.n	8000524 <pin_pull_type+0xda>
	else if ( ret->pupd == pull_down )
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	79db      	ldrb	r3, [r3, #7]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d11d      	bne.n	8000524 <pin_pull_type+0xda>
		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68da      	ldr	r2, [r3, #12]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR |= (1<<(((ret->pin)*2)+1));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	3301      	adds	r3, #1
 8000514:	2101      	movs	r1, #1
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	430a      	orrs	r2, r1
 8000522:	60da      	str	r2, [r3, #12]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <pin_init>:

pin_t pin_init(volatile gpio_t* port, gpio_pin_t pin, pin_mode_t mode, pin_output_type_t otype, pin_pull_t pupd )
{
 800052e:	b590      	push	{r4, r7, lr}
 8000530:	b089      	sub	sp, #36	; 0x24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	4611      	mov	r1, r2
 800053a:	461a      	mov	r2, r3
 800053c:	460b      	mov	r3, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	pin_t ret ;
	ret.port = port;
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	617b      	str	r3, [r7, #20]
	ret.mode = mode;
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	76bb      	strb	r3, [r7, #26]
	ret.pupd = pupd ;
 800054c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000550:	76fb      	strb	r3, [r7, #27]
	ret.otype = otype;
 8000552:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000556:	777b      	strb	r3, [r7, #29]
	ret.pin = pin;
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	763b      	strb	r3, [r7, #24]


	pin_mode(&ret);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff feb1 	bl	80002c8 <pin_mode>
	pin_pull_type(&ret);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ff6d 	bl	800044a <pin_pull_type>
	pin_outut_type(&ret);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff3b 	bl	80003f0 <pin_outut_type>



	return ret ;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	461c      	mov	r4, r3
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	3724      	adds	r7, #36	; 0x24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}

08000592 <pin_level>:


void pin_level(pin_t *ret , uint8_t level)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]

	if ( level == pin_high)
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d109      	bne.n	80005b8 <pin_level+0x26>
	{
		ret->port->GPIOx_BSRR = (1<<ret->pin);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	461a      	mov	r2, r3
 80005aa:	2301      	movs	r3, #1
 80005ac:	fa03 f202 	lsl.w	r2, r3, r2
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	619a      	str	r2, [r3, #24]
	}
	else
	{
		;
	}
}
 80005b6:	e00a      	b.n	80005ce <pin_level+0x3c>
	else if (level == pin_low)
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d107      	bne.n	80005ce <pin_level+0x3c>
		ret->port->GPIOx_BSRR = (1<<((ret->pin)+16));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	3310      	adds	r3, #16
 80005c4:	2201      	movs	r2, #1
 80005c6:	409a      	lsls	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	619a      	str	r2, [r3, #24]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b08      	cmp	r3, #8
 80005e6:	f200 80f6 	bhi.w	80007d6 <AHB_PRE_SELECT+0x1fe>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <AHB_PRE_SELECT+0x18>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000615 	.word	0x08000615
 80005f4:	08000647 	.word	0x08000647
 80005f8:	08000679 	.word	0x08000679
 80005fc:	080006ab 	.word	0x080006ab
 8000600:	080006dd 	.word	0x080006dd
 8000604:	0800070f 	.word	0x0800070f
 8000608:	08000741 	.word	0x08000741
 800060c:	08000773 	.word	0x08000773
 8000610:	080007a5 	.word	0x080007a5
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000614:	4b7f      	ldr	r3, [pc, #508]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a7e      	ldr	r2, [pc, #504]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800061a:	f023 0310 	bic.w	r3, r3, #16
 800061e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000620:	4b7c      	ldr	r3, [pc, #496]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4a7b      	ldr	r2, [pc, #492]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000626:	f023 0320 	bic.w	r3, r3, #32
 800062a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800062c:	4b79      	ldr	r3, [pc, #484]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	4a78      	ldr	r2, [pc, #480]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000636:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8000638:	4b76      	ldr	r3, [pc, #472]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4a75      	ldr	r2, [pc, #468]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800063e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000642:	6093      	str	r3, [r2, #8]
		break;
 8000644:	e0e0      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000646:	4b73      	ldr	r3, [pc, #460]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	4a72      	ldr	r2, [pc, #456]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800064c:	f023 0310 	bic.w	r3, r3, #16
 8000650:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000652:	4b70      	ldr	r3, [pc, #448]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	4a6f      	ldr	r2, [pc, #444]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000658:	f023 0320 	bic.w	r3, r3, #32
 800065c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800065e:	4b6d      	ldr	r3, [pc, #436]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	4a6c      	ldr	r2, [pc, #432]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000668:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800066a:	4b6a      	ldr	r3, [pc, #424]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	4a69      	ldr	r2, [pc, #420]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6093      	str	r3, [r2, #8]
		break;
 8000676:	e0c7      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000678:	4b66      	ldr	r3, [pc, #408]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4a65      	ldr	r2, [pc, #404]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000684:	4b63      	ldr	r3, [pc, #396]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a62      	ldr	r2, [pc, #392]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800068a:	f023 0320 	bic.w	r3, r3, #32
 800068e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000690:	4b60      	ldr	r3, [pc, #384]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4a5f      	ldr	r2, [pc, #380]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800069c:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a6:	6093      	str	r3, [r2, #8]
		break;
 80006a8:	e0ae      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80006aa:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	4a59      	ldr	r2, [pc, #356]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80006b6:	4b57      	ldr	r3, [pc, #348]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4a56      	ldr	r2, [pc, #344]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4a53      	ldr	r2, [pc, #332]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006cc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80006ce:	4b51      	ldr	r3, [pc, #324]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	4a50      	ldr	r2, [pc, #320]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6093      	str	r3, [r2, #8]
		break;
 80006da:	e095      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80006dc:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a4c      	ldr	r2, [pc, #304]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80006e8:	4b4a      	ldr	r3, [pc, #296]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a49      	ldr	r2, [pc, #292]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80006f4:	4b47      	ldr	r3, [pc, #284]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a46      	ldr	r2, [pc, #280]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80006fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006fe:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000700:	4b44      	ldr	r3, [pc, #272]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	4a43      	ldr	r2, [pc, #268]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070a:	6093      	str	r3, [r2, #8]
		break;
 800070c:	e07c      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 800070e:	4b41      	ldr	r3, [pc, #260]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	4a40      	ldr	r2, [pc, #256]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000714:	f023 0310 	bic.w	r3, r3, #16
 8000718:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800071a:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	4a3d      	ldr	r2, [pc, #244]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000720:	f023 0320 	bic.w	r3, r3, #32
 8000724:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000726:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	4a3a      	ldr	r2, [pc, #232]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	4a37      	ldr	r2, [pc, #220]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6093      	str	r3, [r2, #8]
		break;
 800073e:	e063      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a33      	ldr	r2, [pc, #204]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800074c:	4b31      	ldr	r3, [pc, #196]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4a30      	ldr	r2, [pc, #192]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000752:	f023 0320 	bic.w	r3, r3, #32
 8000756:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800076a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076e:	6093      	str	r3, [r2, #8]
		break;
 8000770:	e04a      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	4a27      	ldr	r2, [pc, #156]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000778:	f023 0310 	bic.w	r3, r3, #16
 800077c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	4a24      	ldr	r2, [pc, #144]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6093      	str	r3, [r2, #8]
		break;
 80007a2:	e031      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	4a14      	ldr	r2, [pc, #80]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a11      	ldr	r2, [pc, #68]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d2:	6093      	str	r3, [r2, #8]
		break;
 80007d4:	e018      	b.n	8000808 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007dc:	f023 0310 	bic.w	r3, r3, #16
 80007e0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007e8:	f023 0320 	bic.w	r3, r3, #32
 80007ec:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <AHB_PRE_SELECT+0x23c>)
 8000800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000804:	6093      	str	r3, [r2, #8]
		break;
 8000806:	bf00      	nop
	}
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d86c      	bhi.n	8000902 <APB1_PRE_SELECT+0xea>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <APB1_PRE_SELECT+0x18>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000845 	.word	0x08000845
 8000834:	0800086b 	.word	0x0800086b
 8000838:	08000891 	.word	0x08000891
 800083c:	080008b7 	.word	0x080008b7
 8000840:	080008dd 	.word	0x080008dd
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	4a31      	ldr	r2, [pc, #196]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 800084a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800084e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800085a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000866:	6093      	str	r3, [r2, #8]
		break;
 8000868:	e04c      	b.n	8000904 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000874:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 800087c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000880:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	4a22      	ldr	r2, [pc, #136]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088c:	6093      	str	r3, [r2, #8]
		break;
 800088e:	e039      	b.n	8000904 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008a6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b2:	6093      	str	r3, [r2, #8]
		break;
 80008b4:	e026      	b.n	8000904 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008c0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008cc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d8:	6093      	str	r3, [r2, #8]
		break;
 80008da:	e013      	b.n	8000904 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <APB1_PRE_SELECT+0xf8>)
 80008fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008fe:	6093      	str	r3, [r2, #8]
		break;
 8000900:	e000      	b.n	8000904 <APB1_PRE_SELECT+0xec>
	default:
		break;
 8000902:	bf00      	nop
	}
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b04      	cmp	r3, #4
 8000922:	d86c      	bhi.n	80009fe <APB2_PRE_SELECT+0xea>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <APB2_PRE_SELECT+0x18>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	08000941 	.word	0x08000941
 8000930:	08000967 	.word	0x08000967
 8000934:	0800098d 	.word	0x0800098d
 8000938:	080009b3 	.word	0x080009b3
 800093c:	080009d9 	.word	0x080009d9
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800094a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	4a2e      	ldr	r2, [pc, #184]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000956:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 8000958:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800095e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000962:	6093      	str	r3, [r2, #8]
		break;
 8000964:	e04c      	b.n	8000a00 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800096c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000970:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	4a25      	ldr	r2, [pc, #148]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800097c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000988:	6093      	str	r3, [r2, #8]
		break;
 800098a:	e039      	b.n	8000a00 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 8000992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000996:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 800099e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009a2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ae:	6093      	str	r3, [r2, #8]
		break;
 80009b0:	e026      	b.n	8000a00 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009bc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d4:	6093      	str	r3, [r2, #8]
		break;
 80009d6:	e013      	b.n	8000a00 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <APB2_PRE_SELECT+0xf8>)
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	6093      	str	r3, [r2, #8]
		break;
 80009fc:	e000      	b.n	8000a00 <APB2_PRE_SELECT+0xec>
	default:
		break;
 80009fe:	bf00      	nop
	}
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <rcc_sys_init_pllr_32MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
}

void rcc_sys_init_pllr_32MHz_all(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 64 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 8000a14:	4b5f      	ldr	r3, [pc, #380]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a5e      	ldr	r2, [pc, #376]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a1a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a1e:	6053      	str	r3, [r2, #4]

	//Q = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 8000a20:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a5b      	ldr	r2, [pc, #364]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a2a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ1);
 8000a2c:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a58      	ldr	r2, [pc, #352]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a36:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ2);
 8000a38:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a55      	ldr	r2, [pc, #340]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000a42:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8000a44:	4b53      	ldr	r3, [pc, #332]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a52      	ldr	r2, [pc, #328]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a4a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a4e:	6053      	str	r3, [r2, #4]

	//R = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLR0);
 8000a50:	4b50      	ldr	r3, [pc, #320]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a4f      	ldr	r2, [pc, #316]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLR1);
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a4c      	ldr	r2, [pc, #304]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a66:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLR2);
 8000a68:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000a72:	6053      	str	r3, [r2, #4]

	//N = 64 >> 0b00100 0000
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8000a74:	4b47      	ldr	r3, [pc, #284]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4a46      	ldr	r2, [pc, #280]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a7e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8000a80:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a43      	ldr	r2, [pc, #268]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a8a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN2);
 8000a8c:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a96:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8000a98:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a3d      	ldr	r2, [pc, #244]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000a9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aa2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN4);
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aae:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000aba:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ad2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ade:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a28      	ldr	r2, [pc, #160]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000af2:	f023 0302 	bic.w	r3, r3, #2
 8000af6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000afe:	f023 0304 	bic.w	r3, r3, #4
 8000b02:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b16:	f023 0310 	bic.w	r3, r3, #16
 8000b1a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b22:	f023 0320 	bic.w	r3, r3, #32
 8000b26:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 32MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff fd55 	bl	80005d8 <AHB_PRE_SELECT>

	//APB1 prescaler /1  32MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fe72 	bl	8000818 <APB1_PRE_SELECT>

	//APB2 prescaler /1  32MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff feed 	bl	8000914 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b44:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8000b46:	bf00      	nop
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0e5b      	lsrs	r3, r3, #25
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <rcc_sys_init_pllr_32MHz_all+0x138>

	//System clock switch >> HSI oscillator selected as system clock
	set_bit(RCC->RCC_CFGR,SW0);
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
 8000b6e:	bf00      	nop
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	f003 0202 	and.w	r2, r3, #2
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <rcc_sys_init_pllr_32MHz_all+0x184>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	4313      	orrs	r3, r2
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d1f1      	bne.n	8000b70 <rcc_sys_init_pllr_32MHz_all+0x160>
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <rcc_ahb1_clk_enable>:

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <rcc_ahb1_clk_enable+0x28>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	79fa      	ldrb	r2, [r7, #7]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <rcc_ahb1_clk_enable+0x28>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <main>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af02      	add	r7, sp, #8
	rcc_sys_init_pllr_32MHz_all();
 8000bca:	f7ff ff21 	bl	8000a10 <rcc_sys_init_pllr_32MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ffe2 	bl	8000b98 <rcc_ahb1_clk_enable>
	sys_delay_init(32000000);
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <main+0x50>)
 8000bd6:	f7ff fb23 	bl	8000220 <sys_delay_init>
	pin_t led = pin_init(GPIOA, gpio_pin5, pin_mode_output, pin_push_pull, no_pull);
 8000bda:	1d38      	adds	r0, r7, #4
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2300      	movs	r3, #0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	2205      	movs	r2, #5
 8000be8:	490b      	ldr	r1, [pc, #44]	; (8000c18 <main+0x54>)
 8000bea:	f7ff fca0 	bl	800052e <pin_init>


	/* Loop forever */
	while (1)
	{
		pin_level(&led,pin_high);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fccd 	bl	8000592 <pin_level>
		delay_ms(1000);
 8000bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfc:	f7ff fb54 	bl	80002a8 <delay_ms>
		pin_level(&led,pin_low);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcc4 	bl	8000592 <pin_level>
		delay_ms(1000);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f7ff fb4b 	bl	80002a8 <delay_ms>
		pin_level(&led,pin_high);
 8000c12:	e7ec      	b.n	8000bee <main+0x2a>
 8000c14:	01e84800 	.word	0x01e84800
 8000c18:	40020000 	.word	0x40020000

08000c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c4a:	f000 f811 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff ffb9 	bl	8000bc4 <main>

08000c52 <LoopForever>:

LoopForever:
  b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   r0, =_estack
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c60:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000c64:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c68:	20000020 	.word	0x20000020

08000c6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4d0d      	ldr	r5, [pc, #52]	; (8000ca8 <__libc_init_array+0x38>)
 8000c74:	4c0d      	ldr	r4, [pc, #52]	; (8000cac <__libc_init_array+0x3c>)
 8000c76:	1b64      	subs	r4, r4, r5
 8000c78:	10a4      	asrs	r4, r4, #2
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	4d0b      	ldr	r5, [pc, #44]	; (8000cb0 <__libc_init_array+0x40>)
 8000c82:	4c0c      	ldr	r4, [pc, #48]	; (8000cb4 <__libc_init_array+0x44>)
 8000c84:	f000 f818 	bl	8000cb8 <_init>
 8000c88:	1b64      	subs	r4, r4, r5
 8000c8a:	10a4      	asrs	r4, r4, #2
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cd0 	.word	0x08000cd0
 8000cac:	08000cd0 	.word	0x08000cd0
 8000cb0:	08000cd0 	.word	0x08000cd0
 8000cb4:	08000cd4 	.word	0x08000cd4

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
