
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002654  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  00012830  2**0
                  CONTENTS
  4 .ARM          00000000  08002828  08002828  00012830  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002828  08002830  00012830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08002830  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002830  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00012830  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001285a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001644  00000000  00000000  0001289d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000667  00000000  00000000  00013ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00014548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  000146e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003561  00000000  00000000  00014800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003049  00000000  00000000  00017d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c31  00000000  00000000  0001adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000648  00000000  00000000  000249dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00025024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002800 	.word	0x08002800

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08002800 	.word	0x08002800

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:
#include "cpu.h"

static volatile uint32_t us_counter = 0 ;

void SysTick_Handler (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	us_counter++;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Handler+0x18>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <SysTick_Handler+0x18>)
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000001c 	.word	0x2000001c

08000a10 <pin_mode>:
 *      Author: moata
 */
#include "gpio.h"

static void pin_mode(pin_t* ret)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if ( ret->mode == pin_mode_input )
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	799b      	ldrb	r3, [r3, #6]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d11f      	bne.n	8000a60 <pin_mode+0x50>
	{

		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	4619      	mov	r1, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	400a      	ands	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
	{
		;
	}


}
 8000a5e:	e066      	b.n	8000b2e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_output )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	799b      	ldrb	r3, [r3, #6]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d11e      	bne.n	8000aa6 <pin_mode+0x96>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3301      	adds	r3, #1
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	e043      	b.n	8000b2e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_alternate_fun )
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	799b      	ldrb	r3, [r3, #6]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d11e      	bne.n	8000aec <pin_mode+0xdc>
		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	791b      	ldrb	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	400a      	ands	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	3301      	adds	r3, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	e020      	b.n	8000b2e <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_analog )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	799b      	ldrb	r3, [r3, #6]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d11c      	bne.n	8000b2e <pin_mode+0x11e>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	4619      	mov	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <pin_outut_type>:

static void pin_outut_type(pin_t* ret)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if ( ret->otype == pin_push_pull )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7a5b      	ldrb	r3, [r3, #9]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10e      	bne.n	8000b66 <pin_outut_type+0x2e>
	{

		ret->port->GPIOx_OTYPER &= ~(1<<(ret->pin));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2301      	movs	r3, #1
 8000b56:	408b      	lsls	r3, r1
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	400a      	ands	r2, r1
 8000b62:	605a      	str	r2, [r3, #4]
	{
		;
	}


}
 8000b64:	e010      	b.n	8000b88 <pin_outut_type+0x50>
	else if ( ret->otype == pin_open_drain )
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a5b      	ldrb	r3, [r3, #9]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d10c      	bne.n	8000b88 <pin_outut_type+0x50>
		ret->port->GPIOx_OTYPER |= (1<<(ret->pin));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	605a      	str	r2, [r3, #4]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <pin_pull_type>:

static void pin_pull_type(pin_t* ret)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	if ( ret->pupd == no_pull )
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	79db      	ldrb	r3, [r3, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11f      	bne.n	8000be2 <pin_pull_type+0x50>
	{

		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	400a      	ands	r2, r1
 8000bde:	60da      	str	r2, [r3, #12]
	{
		;
	}


}
 8000be0:	e044      	b.n	8000c6c <pin_pull_type+0xda>
	else if ( ret->pupd == pull_up )
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	79db      	ldrb	r3, [r3, #7]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d11e      	bne.n	8000c28 <pin_pull_type+0x96>
		ret->port->GPIOx_PUPDR |= (1<<((ret->pin)*2));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	791b      	ldrb	r3, [r3, #4]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	3301      	adds	r3, #1
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	400a      	ands	r2, r1
 8000c24:	60da      	str	r2, [r3, #12]
}
 8000c26:	e021      	b.n	8000c6c <pin_pull_type+0xda>
	else if ( ret->pupd == pull_down )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	79db      	ldrb	r3, [r3, #7]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d11d      	bne.n	8000c6c <pin_pull_type+0xda>
		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	791b      	ldrb	r3, [r3, #4]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	4619      	mov	r1, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR |= (1<<(((ret->pin)*2)+1));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	4619      	mov	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <pin_init>:

pin_t pin_init(volatile gpio_t* port, gpio_pin_t pin, pin_mode_t mode, pin_output_type_t otype, pin_pull_t pupd )
{
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b089      	sub	sp, #36	; 0x24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	460b      	mov	r3, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	pin_t ret ;
	ret.port = port;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	617b      	str	r3, [r7, #20]
	ret.mode = mode;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	76bb      	strb	r3, [r7, #26]
	ret.pupd = pupd ;
 8000c94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c98:	76fb      	strb	r3, [r7, #27]
	ret.otype = otype;
 8000c9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c9e:	777b      	strb	r3, [r7, #29]
	ret.pin = pin;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	763b      	strb	r3, [r7, #24]


	pin_mode(&ret);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff feb1 	bl	8000a10 <pin_mode>
	pin_pull_type(&ret);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff6d 	bl	8000b92 <pin_pull_type>
	pin_outut_type(&ret);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff3b 	bl	8000b38 <pin_outut_type>



	return ret ;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	461c      	mov	r4, r3
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd90      	pop	{r4, r7, pc}

08000cda <pin_level>:


void pin_level(pin_t *ret , uint8_t level)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]

	if ( level == pin_high)
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d109      	bne.n	8000d00 <pin_level+0x26>
	{
		ret->port->GPIOx_BSRR = (1<<ret->pin);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	fa03 f202 	lsl.w	r2, r3, r2
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	619a      	str	r2, [r3, #24]
	}
	else
	{
		;
	}
}
 8000cfe:	e00a      	b.n	8000d16 <pin_level+0x3c>
	else if (level == pin_low)
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d107      	bne.n	8000d16 <pin_level+0x3c>
		ret->port->GPIOx_BSRR = (1<<((ret->pin)+16));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	3310      	adds	r3, #16
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	619a      	str	r2, [r3, #24]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <pin_af>:

	return (((ret->port->GPIOx_IDR)>>ret->pin) & 1) ;
}

void pin_af(pin_t* ret, pin_alternate_t af)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	70fb      	strb	r3, [r7, #3]
	if (ret->pin < 8)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	f200 8421 	bhi.w	8001578 <pin_af+0x858>
	{
		if (af == AF0)
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d140      	bne.n	8000dbe <pin_af+0x9e>
		{
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a1a      	ldr	r2, [r3, #32]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	400a      	ands	r2, r1
 8000d58:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a1a      	ldr	r2, [r3, #32]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	3301      	adds	r3, #1
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4619      	mov	r1, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	400a      	ands	r2, r1
 8000d78:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	400a      	ands	r2, r1
 8000d98:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a1a      	ldr	r2, [r3, #32]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	3303      	adds	r3, #3
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	400a      	ands	r2, r1
 8000db8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
		}

	}
}
 8000dba:	f001 b82d 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF1)
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d13f      	bne.n	8000e44 <pin_af+0x124>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a1a      	ldr	r2, [r3, #32]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	791b      	ldrb	r3, [r3, #4]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	3301      	adds	r3, #1
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	791b      	ldrb	r3, [r3, #4]
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a1a      	ldr	r2, [r3, #32]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	791b      	ldrb	r3, [r3, #4]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	621a      	str	r2, [r3, #32]
}
 8000e40:	f000 bfea 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF2)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d13f      	bne.n	8000eca <pin_af+0x1aa>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	791b      	ldrb	r3, [r3, #4]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	400a      	ands	r2, r1
 8000e66:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a1a      	ldr	r2, [r3, #32]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	3301      	adds	r3, #1
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a1a      	ldr	r2, [r3, #32]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	2101      	movs	r1, #1
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a1a      	ldr	r2, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	791b      	ldrb	r3, [r3, #4]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	3303      	adds	r3, #3
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	621a      	str	r2, [r3, #32]
}
 8000ec6:	f000 bfa7 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF3)
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d13e      	bne.n	8000f4e <pin_af+0x22e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	3301      	adds	r3, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	791b      	ldrb	r3, [r3, #4]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	3303      	adds	r3, #3
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	400a      	ands	r2, r1
 8000f48:	621a      	str	r2, [r3, #32]
}
 8000f4a:	f000 bf65 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF4)
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d13f      	bne.n	8000fd4 <pin_af+0x2b4>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6a1a      	ldr	r2, [r3, #32]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	400a      	ands	r2, r1
 8000f70:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	3301      	adds	r3, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4619      	mov	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	400a      	ands	r2, r1
 8000f90:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a1a      	ldr	r2, [r3, #32]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	400a      	ands	r2, r1
 8000fce:	621a      	str	r2, [r3, #32]
}
 8000fd0:	f000 bf22 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF5)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d13e      	bne.n	8001058 <pin_af+0x338>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	3301      	adds	r3, #1
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	4619      	mov	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	3303      	adds	r3, #3
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
}
 8001054:	f000 bee0 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF6)
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b06      	cmp	r3, #6
 800105c:	d13e      	bne.n	80010dc <pin_af+0x3bc>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	400a      	ands	r2, r1
 800107a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	3301      	adds	r3, #1
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4619      	mov	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a1a      	ldr	r2, [r3, #32]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a1a      	ldr	r2, [r3, #32]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	3303      	adds	r3, #3
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	400a      	ands	r2, r1
 80010d6:	621a      	str	r2, [r3, #32]
}
 80010d8:	f000 be9e 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF7)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d13d      	bne.n	800115e <pin_af+0x43e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	791b      	ldrb	r3, [r3, #4]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3301      	adds	r3, #1
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	4619      	mov	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4619      	mov	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3303      	adds	r3, #3
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	400a      	ands	r2, r1
 8001158:	621a      	str	r2, [r3, #32]
}
 800115a:	f000 be5d 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF8)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b08      	cmp	r3, #8
 8001162:	d13f      	bne.n	80011e4 <pin_af+0x4c4>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a1a      	ldr	r2, [r3, #32]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	3301      	adds	r3, #1
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	400a      	ands	r2, r1
 80011c0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a1a      	ldr	r2, [r3, #32]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	3303      	adds	r3, #3
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
}
 80011e0:	f000 be1a 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF9)
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	d13e      	bne.n	8001268 <pin_af+0x548>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a1a      	ldr	r2, [r3, #32]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	791b      	ldrb	r3, [r3, #4]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a1a      	ldr	r2, [r3, #32]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	3301      	adds	r3, #1
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	400a      	ands	r2, r1
 8001224:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	3303      	adds	r3, #3
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	4619      	mov	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	621a      	str	r2, [r3, #32]
}
 8001264:	f000 bdd8 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF10)
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d13e      	bne.n	80012ec <pin_af+0x5cc>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	400a      	ands	r2, r1
 800128a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	3301      	adds	r3, #1
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	400a      	ands	r2, r1
 80012c8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a1a      	ldr	r2, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	3303      	adds	r3, #3
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	621a      	str	r2, [r3, #32]
}
 80012e8:	f000 bd96 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF11)
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	2b0b      	cmp	r3, #11
 80012f0:	d13d      	bne.n	800136e <pin_af+0x64e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4619      	mov	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	791b      	ldrb	r3, [r3, #4]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	3301      	adds	r3, #1
 800131c:	2101      	movs	r1, #1
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	4619      	mov	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	791b      	ldrb	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	791b      	ldrb	r3, [r3, #4]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	3303      	adds	r3, #3
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4619      	mov	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	621a      	str	r2, [r3, #32]
}
 800136a:	f000 bd55 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF12)
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d13e      	bne.n	80013f2 <pin_af+0x6d2>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1a      	ldr	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3301      	adds	r3, #1
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	400a      	ands	r2, r1
 80013b0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a1a      	ldr	r2, [r3, #32]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a1a      	ldr	r2, [r3, #32]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	3303      	adds	r3, #3
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	621a      	str	r2, [r3, #32]
}
 80013ee:	f000 bd13 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF13)
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b0d      	cmp	r3, #13
 80013f6:	d13d      	bne.n	8001474 <pin_af+0x754>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	4619      	mov	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a1a      	ldr	r2, [r3, #32]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	3301      	adds	r3, #1
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	4619      	mov	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	4619      	mov	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	791b      	ldrb	r3, [r3, #4]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	3303      	adds	r3, #3
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	4619      	mov	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	621a      	str	r2, [r3, #32]
}
 8001470:	f000 bcd2 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF14)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b0e      	cmp	r3, #14
 8001478:	d13d      	bne.n	80014f6 <pin_af+0x7d6>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	3301      	adds	r3, #1
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4619      	mov	r1, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6a1a      	ldr	r2, [r3, #32]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	3303      	adds	r3, #3
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	621a      	str	r2, [r3, #32]
}
 80014f2:	f000 bc91 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF15)
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	f040 848d 	bne.w	8001e18 <pin_af+0x10f8>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	3301      	adds	r3, #1
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	4619      	mov	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4619      	mov	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	791b      	ldrb	r3, [r3, #4]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3303      	adds	r3, #3
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	4619      	mov	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	621a      	str	r2, [r3, #32]
}
 8001574:	f000 bc50 	b.w	8001e18 <pin_af+0x10f8>
		if (af == AF0)
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d144      	bne.n	8001608 <pin_af+0x8e8>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	3b08      	subs	r3, #8
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	3b08      	subs	r3, #8
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	3301      	adds	r3, #1
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	400a      	ands	r2, r1
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	3b08      	subs	r3, #8
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	3303      	adds	r3, #3
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001604:	f000 bc08 	b.w	8001e18 <pin_af+0x10f8>
		else if (af == AF1)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d142      	bne.n	8001694 <pin_af+0x974>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	791b      	ldrb	r3, [r3, #4]
 8001618:	3b08      	subs	r3, #8
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	4619      	mov	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	3301      	adds	r3, #1
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	400a      	ands	r2, r1
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	791b      	ldrb	r3, [r3, #4]
 8001658:	3b08      	subs	r3, #8
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	791b      	ldrb	r3, [r3, #4]
 800167a:	3b08      	subs	r3, #8
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	3303      	adds	r3, #3
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001692:	e3c1      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF2)
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d142      	bne.n	8001720 <pin_af+0xa00>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	3b08      	subs	r3, #8
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	400a      	ands	r2, r1
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	3b08      	subs	r3, #8
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3301      	adds	r3, #1
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	3b08      	subs	r3, #8
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	791b      	ldrb	r3, [r3, #4]
 8001706:	3b08      	subs	r3, #8
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3303      	adds	r3, #3
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800171e:	e37b      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF3)
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d141      	bne.n	80017aa <pin_af+0xa8a>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	3b08      	subs	r3, #8
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	3b08      	subs	r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	3301      	adds	r3, #1
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	4619      	mov	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	3b08      	subs	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	400a      	ands	r2, r1
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	3b08      	subs	r3, #8
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	3303      	adds	r3, #3
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017a8:	e336      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF4)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d142      	bne.n	8001836 <pin_af+0xb16>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	791b      	ldrb	r3, [r3, #4]
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	3b08      	subs	r3, #8
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	3301      	adds	r3, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	791b      	ldrb	r3, [r3, #4]
 80017fc:	3b08      	subs	r3, #8
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	791b      	ldrb	r3, [r3, #4]
 800181c:	3b08      	subs	r3, #8
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	3303      	adds	r3, #3
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	400a      	ands	r2, r1
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001834:	e2f0      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF5)
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d141      	bne.n	80018c0 <pin_af+0xba0>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	791b      	ldrb	r3, [r3, #4]
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	4619      	mov	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	791b      	ldrb	r3, [r3, #4]
 8001864:	3b08      	subs	r3, #8
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	3301      	adds	r3, #1
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	3b08      	subs	r3, #8
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	4619      	mov	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	3b08      	subs	r3, #8
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3303      	adds	r3, #3
 80018ac:	2101      	movs	r1, #1
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	400a      	ands	r2, r1
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018be:	e2ab      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF6)
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d141      	bne.n	800194a <pin_af+0xc2a>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	3b08      	subs	r3, #8
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	791b      	ldrb	r3, [r3, #4]
 80018f0:	3b08      	subs	r3, #8
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	3301      	adds	r3, #1
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	3b08      	subs	r3, #8
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	4619      	mov	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	791b      	ldrb	r3, [r3, #4]
 8001930:	3b08      	subs	r3, #8
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3303      	adds	r3, #3
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	4619      	mov	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001948:	e266      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF7)
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	2b07      	cmp	r3, #7
 800194e:	d140      	bne.n	80019d2 <pin_af+0xcb2>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	3b08      	subs	r3, #8
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4619      	mov	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	3b08      	subs	r3, #8
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3301      	adds	r3, #1
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	4619      	mov	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	3b08      	subs	r3, #8
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	3b08      	subs	r3, #8
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	3303      	adds	r3, #3
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	400a      	ands	r2, r1
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019d0:	e222      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF8)
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d142      	bne.n	8001a5e <pin_af+0xd3e>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	3b08      	subs	r3, #8
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3301      	adds	r3, #1
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	400a      	ands	r2, r1
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791b      	ldrb	r3, [r3, #4]
 8001a24:	3b08      	subs	r3, #8
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	400a      	ands	r2, r1
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	791b      	ldrb	r3, [r3, #4]
 8001a46:	3b08      	subs	r3, #8
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	3303      	adds	r3, #3
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a5c:	e1dc      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF9)
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d141      	bne.n	8001ae8 <pin_af+0xdc8>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	3b08      	subs	r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	791b      	ldrb	r3, [r3, #4]
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	3301      	adds	r3, #1
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	791b      	ldrb	r3, [r3, #4]
 8001ad0:	3b08      	subs	r3, #8
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ae6:	e197      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF10)
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d141      	bne.n	8001b72 <pin_af+0xe52>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	3b08      	subs	r3, #8
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	3b08      	subs	r3, #8
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	3b08      	subs	r3, #8
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4619      	mov	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	3b08      	subs	r3, #8
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3303      	adds	r3, #3
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b70:	e152      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF11)
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	2b0b      	cmp	r3, #11
 8001b76:	d140      	bne.n	8001bfa <pin_af+0xeda>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	791b      	ldrb	r3, [r3, #4]
 8001b82:	3b08      	subs	r3, #8
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	791b      	ldrb	r3, [r3, #4]
 8001be2:	3b08      	subs	r3, #8
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3303      	adds	r3, #3
 8001be8:	2101      	movs	r1, #1
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bf8:	e10e      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF12)
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d141      	bne.n	8001c84 <pin_af+0xf64>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	791b      	ldrb	r3, [r3, #4]
 8001c0a:	3b08      	subs	r3, #8
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	791b      	ldrb	r3, [r3, #4]
 8001c4c:	3b08      	subs	r3, #8
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	3b08      	subs	r3, #8
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3303      	adds	r3, #3
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4619      	mov	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c82:	e0c9      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF13)
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	2b0d      	cmp	r3, #13
 8001c88:	d140      	bne.n	8001d0c <pin_af+0xfec>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	791b      	ldrb	r3, [r3, #4]
 8001c94:	3b08      	subs	r3, #8
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	3b08      	subs	r3, #8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	3b08      	subs	r3, #8
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	3b08      	subs	r3, #8
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d0a:	e085      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF14)
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	2b0e      	cmp	r3, #14
 8001d10:	d140      	bne.n	8001d94 <pin_af+0x1074>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	791b      	ldrb	r3, [r3, #4]
 8001d1c:	3b08      	subs	r3, #8
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	2101      	movs	r1, #1
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	400a      	ands	r2, r1
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	791b      	ldrb	r3, [r3, #4]
 8001d3c:	3b08      	subs	r3, #8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3301      	adds	r3, #1
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	791b      	ldrb	r3, [r3, #4]
 8001d7c:	3b08      	subs	r3, #8
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	3303      	adds	r3, #3
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d92:	e041      	b.n	8001e18 <pin_af+0x10f8>
		else if (af == AF15)
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	d13e      	bne.n	8001e18 <pin_af+0x10f8>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	791b      	ldrb	r3, [r3, #4]
 8001da4:	3b08      	subs	r3, #8
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	791b      	ldrb	r3, [r3, #4]
 8001dc2:	3b08      	subs	r3, #8
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	3b08      	subs	r3, #8
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	4619      	mov	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	3b08      	subs	r3, #8
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3303      	adds	r3, #3
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
	...

08001e24 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	f200 80f6 	bhi.w	8002022 <AHB_PRE_SELECT+0x1fe>
 8001e36:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <AHB_PRE_SELECT+0x18>)
 8001e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3c:	08001e61 	.word	0x08001e61
 8001e40:	08001e93 	.word	0x08001e93
 8001e44:	08001ec5 	.word	0x08001ec5
 8001e48:	08001ef7 	.word	0x08001ef7
 8001e4c:	08001f29 	.word	0x08001f29
 8001e50:	08001f5b 	.word	0x08001f5b
 8001e54:	08001f8d 	.word	0x08001f8d
 8001e58:	08001fbf 	.word	0x08001fbf
 8001e5c:	08001ff1 	.word	0x08001ff1
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001e60:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a7e      	ldr	r2, [pc, #504]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e66:	f023 0310 	bic.w	r3, r3, #16
 8001e6a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001e6c:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a7b      	ldr	r2, [pc, #492]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e72:	f023 0320 	bic.w	r3, r3, #32
 8001e76:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a78      	ldr	r2, [pc, #480]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e82:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8001e84:	4b76      	ldr	r3, [pc, #472]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a75      	ldr	r2, [pc, #468]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e8e:	6093      	str	r3, [r2, #8]
		break;
 8001e90:	e0e0      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4a72      	ldr	r2, [pc, #456]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001e98:	f023 0310 	bic.w	r3, r3, #16
 8001e9c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ea4:	f023 0320 	bic.w	r3, r3, #32
 8001ea8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4a6c      	ldr	r2, [pc, #432]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec0:	6093      	str	r3, [r2, #8]
		break;
 8001ec2:	e0c7      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001ec4:	4b66      	ldr	r3, [pc, #408]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a65      	ldr	r2, [pc, #404]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eca:	f043 0310 	orr.w	r3, r3, #16
 8001ece:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a62      	ldr	r2, [pc, #392]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ed6:	f023 0320 	bic.w	r3, r3, #32
 8001eda:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001edc:	4b60      	ldr	r3, [pc, #384]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a5f      	ldr	r2, [pc, #380]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001ee8:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a5c      	ldr	r2, [pc, #368]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	6093      	str	r3, [r2, #8]
		break;
 8001ef4:	e0ae      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001efc:	f023 0310 	bic.w	r3, r3, #16
 8001f00:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001f02:	4b57      	ldr	r3, [pc, #348]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4a56      	ldr	r2, [pc, #344]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001f0e:	4b54      	ldr	r3, [pc, #336]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a53      	ldr	r2, [pc, #332]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f18:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f1a:	4b51      	ldr	r3, [pc, #324]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4a50      	ldr	r2, [pc, #320]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	6093      	str	r3, [r2, #8]
		break;
 8001f26:	e095      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001f28:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001f34:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a49      	ldr	r2, [pc, #292]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f3a:	f043 0320 	orr.w	r3, r3, #32
 8001f3e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f4a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f4c:	4b44      	ldr	r3, [pc, #272]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a43      	ldr	r2, [pc, #268]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f56:	6093      	str	r3, [r2, #8]
		break;
 8001f58:	e07c      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4a40      	ldr	r2, [pc, #256]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f60:	f023 0310 	bic.w	r3, r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f6c:	f023 0320 	bic.w	r3, r3, #32
 8001f70:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a37      	ldr	r2, [pc, #220]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	6093      	str	r3, [r2, #8]
		break;
 8001f8a:	e063      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a33      	ldr	r2, [pc, #204]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a30      	ldr	r2, [pc, #192]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001f9e:	f023 0320 	bic.w	r3, r3, #32
 8001fa2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fae:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fba:	6093      	str	r3, [r2, #8]
		break;
 8001fbc:	e04a      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001fbe:	4b28      	ldr	r3, [pc, #160]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fc4:	f023 0310 	bic.w	r3, r3, #16
 8001fc8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4a21      	ldr	r2, [pc, #132]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fec:	6093      	str	r3, [r2, #8]
		break;
 8001fee:	e031      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a17      	ldr	r2, [pc, #92]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002002:	f043 0320 	orr.w	r3, r3, #32
 8002006:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 800200e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002012:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 800201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201e:	6093      	str	r3, [r2, #8]
		break;
 8002020:	e018      	b.n	8002054 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002028:	f023 0310 	bic.w	r3, r3, #16
 800202c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002034:	f023 0320 	bic.w	r3, r3, #32
 8002038:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002044:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <AHB_PRE_SELECT+0x23c>)
 800204c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002050:	6093      	str	r3, [r2, #8]
		break;
 8002052:	bf00      	nop
	}
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d86c      	bhi.n	800214e <APB1_PRE_SELECT+0xea>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <APB1_PRE_SELECT+0x18>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	08002091 	.word	0x08002091
 8002080:	080020b7 	.word	0x080020b7
 8002084:	080020dd 	.word	0x080020dd
 8002088:	08002103 	.word	0x08002103
 800208c:	08002129 	.word	0x08002129
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800209a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <APB1_PRE_SELECT+0xf8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020a6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020b2:	6093      	str	r3, [r2, #8]
		break;
 80020b4:	e04c      	b.n	8002150 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020cc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d8:	6093      	str	r3, [r2, #8]
		break;
 80020da:	e039      	b.n	8002150 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <APB1_PRE_SELECT+0xf8>)
 80020fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020fe:	6093      	str	r3, [r2, #8]
		break;
 8002100:	e026      	b.n	8002150 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800210c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002114:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002118:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <APB1_PRE_SELECT+0xf8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002124:	6093      	str	r3, [r2, #8]
		break;
 8002126:	e013      	b.n	8002150 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <APB1_PRE_SELECT+0xf8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a0b      	ldr	r2, [pc, #44]	; (800215c <APB1_PRE_SELECT+0xf8>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a08      	ldr	r2, [pc, #32]	; (800215c <APB1_PRE_SELECT+0xf8>)
 800213a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800213e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a05      	ldr	r2, [pc, #20]	; (800215c <APB1_PRE_SELECT+0xf8>)
 8002146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800214a:	6093      	str	r3, [r2, #8]
		break;
 800214c:	e000      	b.n	8002150 <APB1_PRE_SELECT+0xec>
	default:
		break;
 800214e:	bf00      	nop
	}
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d86c      	bhi.n	800224a <APB2_PRE_SELECT+0xea>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <APB2_PRE_SELECT+0x18>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	0800218d 	.word	0x0800218d
 800217c:	080021b3 	.word	0x080021b3
 8002180:	080021d9 	.word	0x080021d9
 8002184:	080021ff 	.word	0x080021ff
 8002188:	08002225 	.word	0x08002225
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002196:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800219e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a2b      	ldr	r2, [pc, #172]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021ae:	6093      	str	r3, [r2, #8]
		break;
 80021b0:	e04c      	b.n	800224c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021bc:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a25      	ldr	r2, [pc, #148]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021c8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d4:	6093      	str	r3, [r2, #8]
		break;
 80021d6:	e039      	b.n	800224c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ee:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fa:	6093      	str	r3, [r2, #8]
		break;
 80021fc:	e026      	b.n	800224c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002208:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800221c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002220:	6093      	str	r3, [r2, #8]
		break;
 8002222:	e013      	b.n	800224c <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800222a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800222e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	4a08      	ldr	r2, [pc, #32]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <APB2_PRE_SELECT+0xf8>)
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	6093      	str	r3, [r2, #8]
		break;
 8002248:	e000      	b.n	800224c <APB2_PRE_SELECT+0xec>
	default:
		break;
 800224a:	bf00      	nop
	}
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <rcc_sys_init_pllr_32MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
}

void rcc_sys_init_pllr_32MHz_all(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 64 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 8002260:	4b5e      	ldr	r3, [pc, #376]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002266:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800226a:	6053      	str	r3, [r2, #4]

	//Q = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 800226c:	4b5b      	ldr	r3, [pc, #364]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a5a      	ldr	r2, [pc, #360]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002276:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ1);
 8002278:	4b58      	ldr	r3, [pc, #352]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a57      	ldr	r2, [pc, #348]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800227e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002282:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ2);
 8002284:	4b55      	ldr	r3, [pc, #340]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a54      	ldr	r2, [pc, #336]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800228a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800228e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002296:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800229a:	6053      	str	r3, [r2, #4]

	//R = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLR0);
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLR1);
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022b2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLR2);
 80022b4:	4b49      	ldr	r3, [pc, #292]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a48      	ldr	r2, [pc, #288]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022be:	6053      	str	r3, [r2, #4]

	//N = 64 >> 0b00100 0000
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a45      	ldr	r2, [pc, #276]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ca:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022d6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN2);
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a3c      	ldr	r2, [pc, #240]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022ee:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN4);
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a39      	ldr	r2, [pc, #228]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022fa:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 80022fc:	4b37      	ldr	r3, [pc, #220]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a36      	ldr	r2, [pc, #216]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002306:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a33      	ldr	r2, [pc, #204]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800230e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002312:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a30      	ldr	r2, [pc, #192]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800231a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800231e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800232a:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a24      	ldr	r2, [pc, #144]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a21      	ldr	r2, [pc, #132]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002362:	f023 0310 	bic.w	r3, r3, #16
 8002366:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800236e:	f023 0320 	bic.w	r3, r3, #32
 8002372:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 32MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8002374:	2001      	movs	r0, #1
 8002376:	f7ff fd55 	bl	8001e24 <AHB_PRE_SELECT>

	//APB1 prescaler /1  32MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fe72 	bl	8002064 <APB1_PRE_SELECT>

	//APB2 prescaler /1  32MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff feed 	bl	8002160 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 800238c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002390:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8002392:	bf00      	nop
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f9      	beq.n	8002394 <rcc_sys_init_pllr_32MHz_all+0x138>

	//System clock switch >> HSI oscillator selected as system clock
	set_bit(RCC->RCC_CFGR,SW0);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
 80023b8:	bf00      	nop
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	f003 0202 	and.w	r2, r3, #2
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <rcc_sys_init_pllr_32MHz_all+0x180>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	089b      	lsrs	r3, r3, #2
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	4313      	orrs	r3, r2
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d1f1      	bne.n	80023ba <rcc_sys_init_pllr_32MHz_all+0x15e>
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800

080023e0 <rcc_ahb1_clk_enable>:

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <rcc_ahb1_clk_enable+0x28>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	4a03      	ldr	r2, [pc, #12]	; (8002408 <rcc_ahb1_clk_enable+0x28>)
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40023800 	.word	0x40023800

0800240c <rcc_apb1_clk_enable>:
void rcc_ahb3_clk_enable(rcc_ahb3_peripherals peripheral)
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}
void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <rcc_apb1_clk_enable+0x28>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4a03      	ldr	r2, [pc, #12]	; (8002434 <rcc_apb1_clk_enable+0x28>)
 8002426:	430b      	orrs	r3, r1
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40023800 	.word	0x40023800

08002438 <usart_init>:
 */

#include "uart.h"

void usart_init(volatile uart_registers_t* usart,usart_parity_t parity,usart_stop_t stop_bit, uint32_t baud_rate,uint32_t Freq_clk,usart_mode_int_t int_mode )
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	72fb      	strb	r3, [r7, #11]
 8002446:	4613      	mov	r3, r2
 8002448:	72bb      	strb	r3, [r7, #10]
	//Bit 15 OVER8: Oversampling mode == 0: oversampling by 16
	usart->USART_CR1 &= ~(1<<OVER8);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	60da      	str	r2, [r3, #12]

	//Bit 13 UE: USART enable = 1: USART enabled
	usart->USART_CR1 |= (1<<UE);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	60da      	str	r2, [r3, #12]

	// Parity control enable  || Parity control disable

	if (parity == usart_parity_enable)
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <usart_init+0x3e>
	{
		//Bit 10 PCE: Parity control enable == 1: Parity control enabled
		usart->USART_CR1 |= (1<<PCE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	e005      	b.n	8002482 <usart_init+0x4a>
	}

	else
	{
		//Bit 10 PCE: Parity control enable == 0: Parity control disabled
		usart->USART_CR1 &= ~(1<<PCE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	60da      	str	r2, [r3, #12]
	}

	// 	Bit 9 PS: Parity selection == 0: Even parity
	usart->USART_CR1 &= ~(1<<PS);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	60da      	str	r2, [r3, #12]

	//STOP bits These bits are used for programming the stop bits

	if (stop_bit == usart_stop_1)
 800248e:	7abb      	ldrb	r3, [r7, #10]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10c      	bne.n	80024ae <usart_init+0x76>
	{
		//Bits 13:12 STOP: 00: 1 Stop bit
		usart->USART_CR2 &= ~(1<<STOP0);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	611a      	str	r2, [r3, #16]
		usart->USART_CR2 &= ~(1<<STOP1);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	e00b      	b.n	80024c6 <usart_init+0x8e>
	}

	else
	{
		//Bits 13:12 STOP: 10: 2 Stop bits
		usart->USART_CR2 &= ~(1<<STOP0);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	611a      	str	r2, [r3, #16]
		usart->USART_CR2 |= (1<<STOP1);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	611a      	str	r2, [r3, #16]
	}

	//Baud rate Calculation
	// usartdiv float number
	double usartdiv =  ( ( (double) Freq_clk) / ( (double) (16 * baud_rate) ) );
 80024c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c8:	f7fd ffe8 	bl	800049c <__aeabi_ui2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ffe1 	bl	800049c <__aeabi_ui2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	f7fe f97f 	bl	80007e4 <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//1- need to convert to real number to get real number alone
	uint32_t div_mantissa = (uint32_t)usartdiv ;
 80024ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024f2:	f7fe fa5f 	bl	80009b4 <__aeabi_d2uiz>
 80024f6:	4603      	mov	r3, r0
 80024f8:	617b      	str	r3, [r7, #20]

	//2- we subtract  real number to floating .
	uint32_t div_fraction = ((uint32_t)( (usartdiv-div_mantissa) * 16) );
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7fd ffce 	bl	800049c <__aeabi_ui2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002508:	f7fd fe8a 	bl	8000220 <__aeabi_dsub>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <usart_init+0x1c0>)
 800251a:	f7fe f839 	bl	8000590 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fa45 	bl	80009b4 <__aeabi_d2uiz>
 800252a:	4603      	mov	r3, r0
 800252c:	613b      	str	r3, [r7, #16]

	// usart->USART_BRR == zero
	usart->USART_BRR = 0 ;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
	//3- save float number in bits [3:0]
	usart->USART_BRR |= (div_fraction<< 0);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	609a      	str	r2, [r3, #8]

	//4- save real number in bits [15:4]
	usart->USART_BRR |= (div_mantissa<< 4);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	609a      	str	r2, [r3, #8]





	if (int_mode == usart_mode_no_int )
 800254e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <usart_init+0x138>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<TXEIE);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<RXNEIE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0220 	bic.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e032      	b.n	80025d6 <usart_init+0x19e>


	}
	else if (int_mode == usart_mode_tx_int)
 8002570:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <usart_init+0x14e>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 1: An USART interrupt is generated whenever TXE=1 in the USART_SR register
		usart->USART_CR1 |= (1<<TXEIE);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	e027      	b.n	80025d6 <usart_init+0x19e>
	}
	else if (int_mode == usart_mode_rx_int)
 8002586:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800258a:	2b02      	cmp	r3, #2
 800258c:	d106      	bne.n	800259c <usart_init+0x164>
	{
		//Bit 5 RXNEIE: RXNE interrupt enable == 1: An USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR
		usart->USART_CR1 |= (1<<RXNEIE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	e01c      	b.n	80025d6 <usart_init+0x19e>
	}
	else if (int_mode == usart_mode_txrx_int)
 800259c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d10c      	bne.n	80025be <usart_init+0x186>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 1: An USART interrupt is generated whenever TXE=1 in the USART_SR register
		usart->USART_CR1 |= (1<<TXEIE);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 1: An USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR
		usart->USART_CR1 |= (1<<RXNEIE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	e00b      	b.n	80025d6 <usart_init+0x19e>

	}
	else
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<TXEIE);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<RXNEIE);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0220 	bic.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	60da      	str	r2, [r3, #12]

	}

	//Bit 3 TE: Transmitter enable == 1: Transmitter is enabled
	usart->USART_CR1 |= (1<<TE);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f043 0208 	orr.w	r2, r3, #8
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	60da      	str	r2, [r3, #12]

	//Bit 2 RE: Receiver enable == 1: Receiver is enabled and begins searching for a start bit
	usart->USART_CR1 |= (1<<RE);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	60da      	str	r2, [r3, #12]


}
 80025ee:	bf00      	nop
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bdb0      	pop	{r4, r5, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40300000 	.word	0x40300000

080025fc <usart_read>:
	}
	usart_write( usart,'\0');
}

char usart_read(volatile uart_registers_t* usart)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]


	//wait until the RXEN bit set  Bit 5 RXNE: Read data register not empty
	while(((usart->USART_SR>>RXNE)&1) == 0);
 8002604:	bf00      	nop
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f9      	beq.n	8002606 <usart_read+0xa>


	// return value
	return (usart->USART_DR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <usart_read_string>:


void usart_read_string(volatile uart_registers_t* usart, char* str)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]

	char ptr = usart_read(usart) ;
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffe5 	bl	80025fc <usart_read>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
	while (ptr != '\0')
 8002636:	e00a      	b.n	800264e <usart_read_string+0x2c>
	{
		*str = ptr ;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	701a      	strb	r2, [r3, #0]
		str++;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	603b      	str	r3, [r7, #0]
		ptr = usart_read(usart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffd9 	bl	80025fc <usart_read>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
	while (ptr != '\0')
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f1      	bne.n	8002638 <usart_read_string+0x16>

	}
	str = '\0';
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]


}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <main>:




int main(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b094      	sub	sp, #80	; 0x50
 8002664:	af02      	add	r7, sp, #8
	pin_t pin_rx ;
	pin_t led;

	char str[20];

	rcc_sys_init_pllr_32MHz_all();
 8002666:	f7ff fdf9 	bl	800225c <rcc_sys_init_pllr_32MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff feb8 	bl	80023e0 <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_USART2);
 8002670:	2011      	movs	r0, #17
 8002672:	f7ff fecb 	bl	800240c <rcc_apb1_clk_enable>

	pin_tx = pin_init(GPIOA,gpio_pin2 ,pin_mode_alternate_fun,pin_push_pull , gpio_null);
 8002676:	4638      	mov	r0, r7
 8002678:	23ff      	movs	r3, #255	; 0xff
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2302      	movs	r3, #2
 8002682:	2202      	movs	r2, #2
 8002684:	4932      	ldr	r1, [pc, #200]	; (8002750 <main+0xf0>)
 8002686:	f7fe faf6 	bl	8000c76 <pin_init>
 800268a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800268e:	463a      	mov	r2, r7
 8002690:	ca07      	ldmia	r2, {r0, r1, r2}
 8002692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pin_rx = pin_init(GPIOA,gpio_pin3 ,pin_mode_alternate_fun,pin_open_drain , gpio_null);
 8002696:	4638      	mov	r0, r7
 8002698:	23ff      	movs	r3, #255	; 0xff
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	2301      	movs	r3, #1
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2302      	movs	r3, #2
 80026a2:	2203      	movs	r2, #3
 80026a4:	492a      	ldr	r1, [pc, #168]	; (8002750 <main+0xf0>)
 80026a6:	f7fe fae6 	bl	8000c76 <pin_init>
 80026aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ae:	463a      	mov	r2, r7
 80026b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	pin_rx = pin_init(GPIOA,gpio_pin5 ,pin_mode_output,pin_open_drain , pull_up);
 80026b6:	4638      	mov	r0, r7
 80026b8:	2301      	movs	r3, #1
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2301      	movs	r3, #1
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2301      	movs	r3, #1
 80026c2:	2205      	movs	r2, #5
 80026c4:	4922      	ldr	r1, [pc, #136]	; (8002750 <main+0xf0>)
 80026c6:	f7fe fad6 	bl	8000c76 <pin_init>
 80026ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ce:	463a      	mov	r2, r7
 80026d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	pin_af(&pin_rx, AF7);
 80026d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026da:	2107      	movs	r1, #7
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fb1f 	bl	8000d20 <pin_af>
	pin_af(&pin_tx, AF7);
 80026e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026e6:	2107      	movs	r1, #7
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fb19 	bl	8000d20 <pin_af>


	usart_init(USART2, usart_parity_disable, usart_stop_1, 9600, 32000000, usart_mode_no_int);
 80026ee:	2300      	movs	r3, #0
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <main+0xf4>)
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <main+0xf8>)
 8002700:	f7ff fe9a 	bl	8002438 <usart_init>
	/* Loop forever */
	while (1)
	{
		//usart_write(USART2, 'M');

		usart_read_string(USART2, str);
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	4619      	mov	r1, r3
 800270a:	4813      	ldr	r0, [pc, #76]	; (8002758 <main+0xf8>)
 800270c:	f7ff ff89 	bl	8002622 <usart_read_string>

		if (!(strcmp(str, "LED ON")))
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	4911      	ldr	r1, [pc, #68]	; (800275c <main+0xfc>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fd74 	bl	8000204 <strcmp>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <main+0xd0>
		{
			pin_level(&led, pin_high);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fad6 	bl	8000cda <pin_level>
 800272e:	e7e9      	b.n	8002704 <main+0xa4>
		}
		else if (!(strcmp(str, "LED OFF")))
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	490a      	ldr	r1, [pc, #40]	; (8002760 <main+0x100>)
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd fd64 	bl	8000204 <strcmp>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e0      	bne.n	8002704 <main+0xa4>
		{
			pin_level(&led, pin_low);
 8002742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fac6 	bl	8000cda <pin_level>
		usart_read_string(USART2, str);
 800274e:	e7d9      	b.n	8002704 <main+0xa4>
 8002750:	40020000 	.word	0x40020000
 8002754:	01e84800 	.word	0x01e84800
 8002758:	40004400 	.word	0x40004400
 800275c:	08002818 	.word	0x08002818
 8002760:	08002820 	.word	0x08002820

08002764 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002766:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002768:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800276c:	480c      	ldr	r0, [pc, #48]	; (80027a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800276e:	490d      	ldr	r1, [pc, #52]	; (80027a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <LoopForever+0xe>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002774:	e002      	b.n	800277c <LoopCopyDataInit>

08002776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277a:	3304      	adds	r3, #4

0800277c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800277c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002780:	d3f9      	bcc.n	8002776 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002784:	4c0a      	ldr	r4, [pc, #40]	; (80027b0 <LoopForever+0x16>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002788:	e001      	b.n	800278e <LoopFillZerobss>

0800278a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800278c:	3204      	adds	r2, #4

0800278e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002790:	d3fb      	bcc.n	800278a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002792:	f000 f811 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002796:	f7ff ff63 	bl	8002660 <main>

0800279a <LoopForever>:

LoopForever:
  b LoopForever
 800279a:	e7fe      	b.n	800279a <LoopForever>
  ldr   r0, =_estack
 800279c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80027a8:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 80027ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80027b0:	20000020 	.word	0x20000020

080027b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b4:	e7fe      	b.n	80027b4 <ADC_IRQHandler>
	...

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4d0d      	ldr	r5, [pc, #52]	; (80027f0 <__libc_init_array+0x38>)
 80027bc:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027be:	1b64      	subs	r4, r4, r5
 80027c0:	10a4      	asrs	r4, r4, #2
 80027c2:	2600      	movs	r6, #0
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	4d0b      	ldr	r5, [pc, #44]	; (80027f8 <__libc_init_array+0x40>)
 80027ca:	4c0c      	ldr	r4, [pc, #48]	; (80027fc <__libc_init_array+0x44>)
 80027cc:	f000 f818 	bl	8002800 <_init>
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	2600      	movs	r6, #0
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	08002828 	.word	0x08002828
 80027f4:	08002828 	.word	0x08002828
 80027f8:	08002828 	.word	0x08002828
 80027fc:	0800282c 	.word	0x0800282c

08002800 <_init>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr

0800280c <_fini>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr
