
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800271c  08002724  00012724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800271c  0800271c  00012724  2**0
                  CONTENTS
  4 .ARM          00000000  0800271c  0800271c  00012724  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800271c  08002724  00012724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08002724  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002724  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00012724  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001274e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015c6  00000000  00000000  00012791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000658  00000000  00000000  00013d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  000143b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  00014548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003326  00000000  00000000  00014668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003006  00000000  00000000  0001798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009bb1  00000000  00000000  0001a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000628  00000000  00000000  00024548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00024b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002704 	.word	0x08002704

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08002704 	.word	0x08002704

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2uiz>:
 80009a0:	004a      	lsls	r2, r1, #1
 80009a2:	d211      	bcs.n	80009c8 <__aeabi_d2uiz+0x28>
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d211      	bcs.n	80009ce <__aeabi_d2uiz+0x2e>
 80009aa:	d50d      	bpl.n	80009c8 <__aeabi_d2uiz+0x28>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d40e      	bmi.n	80009d4 <__aeabi_d2uiz+0x34>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d102      	bne.n	80009da <__aeabi_d2uiz+0x3a>
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:
#include "cpu.h"

static volatile uint32_t us_counter = 0 ;

void SysTick_Handler (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	us_counter++;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Handler+0x18>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <SysTick_Handler+0x18>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000001c 	.word	0x2000001c

080009fc <pin_mode>:
 *      Author: moata
 */
#include "gpio.h"

static void pin_mode(pin_t* ret)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	if ( ret->mode == pin_mode_input )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	799b      	ldrb	r3, [r3, #6]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d11f      	bne.n	8000a4c <pin_mode+0x50>
	{

		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	791b      	ldrb	r3, [r3, #4]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	400a      	ands	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	3301      	adds	r3, #1
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	4619      	mov	r1, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	400a      	ands	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]
	{
		;
	}


}
 8000a4a:	e066      	b.n	8000b1a <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_output )
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	799b      	ldrb	r3, [r3, #6]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d11e      	bne.n	8000a92 <pin_mode+0x96>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	791b      	ldrb	r3, [r3, #4]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER &= ~(1<<(((ret->pin)*2)+1));;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	791b      	ldrb	r3, [r3, #4]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4619      	mov	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	400a      	ands	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	e043      	b.n	8000b1a <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_alternate_fun )
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	799b      	ldrb	r3, [r3, #6]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d11e      	bne.n	8000ad8 <pin_mode+0xdc>
		ret->port->GPIOx_MODER &= ~(1<<((ret->pin)*2));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	e020      	b.n	8000b1a <pin_mode+0x11e>
	else if ( ret->mode == pin_mode_analog )
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	799b      	ldrb	r3, [r3, #6]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d11c      	bne.n	8000b1a <pin_mode+0x11e>
		ret->port->GPIOx_MODER |= (1<<((ret->pin)*2));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]
		ret->port->GPIOx_MODER |= (1<<(((ret->pin)*2)+1));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	3301      	adds	r3, #1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <pin_outut_type>:

static void pin_outut_type(pin_t* ret)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if ( ret->otype == pin_push_pull )
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7a5b      	ldrb	r3, [r3, #9]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10e      	bne.n	8000b52 <pin_outut_type+0x2e>
	{

		ret->port->GPIOx_OTYPER &= ~(1<<(ret->pin));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2301      	movs	r3, #1
 8000b42:	408b      	lsls	r3, r1
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	400a      	ands	r2, r1
 8000b4e:	605a      	str	r2, [r3, #4]
	{
		;
	}


}
 8000b50:	e010      	b.n	8000b74 <pin_outut_type+0x50>
	else if ( ret->otype == pin_open_drain )
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10c      	bne.n	8000b74 <pin_outut_type+0x50>
		ret->port->GPIOx_OTYPER |= (1<<(ret->pin));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	4619      	mov	r1, r3
 8000b66:	2301      	movs	r3, #1
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	605a      	str	r2, [r3, #4]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <pin_pull_type>:

static void pin_pull_type(pin_t* ret)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	if ( ret->pupd == no_pull )
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	79db      	ldrb	r3, [r3, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d11f      	bne.n	8000bce <pin_pull_type+0x50>
	{

		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	400a      	ands	r2, r1
 8000baa:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	3301      	adds	r3, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	400a      	ands	r2, r1
 8000bca:	60da      	str	r2, [r3, #12]
	{
		;
	}


}
 8000bcc:	e044      	b.n	8000c58 <pin_pull_type+0xda>
	else if ( ret->pupd == pull_up )
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	79db      	ldrb	r3, [r3, #7]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d11e      	bne.n	8000c14 <pin_pull_type+0x96>
		ret->port->GPIOx_PUPDR |= (1<<((ret->pin)*2));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR &= ~(1<<(((ret->pin)*2)+1));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	3301      	adds	r3, #1
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	400a      	ands	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]
}
 8000c12:	e021      	b.n	8000c58 <pin_pull_type+0xda>
	else if ( ret->pupd == pull_down )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	79db      	ldrb	r3, [r3, #7]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d11d      	bne.n	8000c58 <pin_pull_type+0xda>
		ret->port->GPIOx_PUPDR &= ~(1<<((ret->pin)*2));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	400a      	ands	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]
		ret->port->GPIOx_PUPDR |= (1<<(((ret->pin)*2)+1));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	3301      	adds	r3, #1
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	60da      	str	r2, [r3, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <pin_init>:

pin_t pin_init(volatile gpio_t* port, gpio_pin_t pin, pin_mode_t mode, pin_output_type_t otype, pin_pull_t pupd )
{
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b089      	sub	sp, #36	; 0x24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	460b      	mov	r3, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
	pin_t ret ;
	ret.port = port;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	617b      	str	r3, [r7, #20]
	ret.mode = mode;
 8000c7c:	79bb      	ldrb	r3, [r7, #6]
 8000c7e:	76bb      	strb	r3, [r7, #26]
	ret.pupd = pupd ;
 8000c80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c84:	76fb      	strb	r3, [r7, #27]
	ret.otype = otype;
 8000c86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c8a:	777b      	strb	r3, [r7, #29]
	ret.pin = pin;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	763b      	strb	r3, [r7, #24]


	pin_mode(&ret);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff feb1 	bl	80009fc <pin_mode>
	pin_pull_type(&ret);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff6d 	bl	8000b7e <pin_pull_type>
	pin_outut_type(&ret);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff3b 	bl	8000b24 <pin_outut_type>



	return ret ;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	461c      	mov	r4, r3
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}

08000cc6 <pin_af>:

	return (((ret->port->GPIOx_IDR)>>ret->pin) & 1) ;
}

void pin_af(pin_t* ret, pin_alternate_t af)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
	if (ret->pin < 8)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	f200 8421 	bhi.w	800151e <pin_af+0x858>
	{
		if (af == AF0)
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d140      	bne.n	8000d64 <pin_af+0x9e>
		{
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	791b      	ldrb	r3, [r3, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6a1a      	ldr	r2, [r3, #32]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a1a      	ldr	r2, [r3, #32]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6a1a      	ldr	r2, [r3, #32]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	791b      	ldrb	r3, [r3, #4]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
		}

	}
}
 8000d60:	f001 b82d 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF1)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d13f      	bne.n	8000dea <pin_af+0x124>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6a1a      	ldr	r2, [r3, #32]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a1a      	ldr	r2, [r3, #32]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	3301      	adds	r3, #1
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	400a      	ands	r2, r1
 8000da4:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	3303      	adds	r3, #3
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	400a      	ands	r2, r1
 8000de4:	621a      	str	r2, [r3, #32]
}
 8000de6:	f000 bfea 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF2)
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d13f      	bne.n	8000e70 <pin_af+0x1aa>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a1a      	ldr	r2, [r3, #32]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6a1a      	ldr	r2, [r3, #32]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a1a      	ldr	r2, [r3, #32]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	791b      	ldrb	r3, [r3, #4]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	400a      	ands	r2, r1
 8000e4a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a1a      	ldr	r2, [r3, #32]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	3303      	adds	r3, #3
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	400a      	ands	r2, r1
 8000e6a:	621a      	str	r2, [r3, #32]
}
 8000e6c:	f000 bfa7 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF3)
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d13e      	bne.n	8000ef4 <pin_af+0x22e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	791b      	ldrb	r3, [r3, #4]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6a1a      	ldr	r2, [r3, #32]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	791b      	ldrb	r3, [r3, #4]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a1a      	ldr	r2, [r3, #32]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	400a      	ands	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	3303      	adds	r3, #3
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	400a      	ands	r2, r1
 8000eee:	621a      	str	r2, [r3, #32]
}
 8000ef0:	f000 bf65 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF4)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d13f      	bne.n	8000f7a <pin_af+0x2b4>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6a1a      	ldr	r2, [r3, #32]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	400a      	ands	r2, r1
 8000f16:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a1a      	ldr	r2, [r3, #32]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	791b      	ldrb	r3, [r3, #4]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3301      	adds	r3, #1
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	400a      	ands	r2, r1
 8000f36:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a1a      	ldr	r2, [r3, #32]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	791b      	ldrb	r3, [r3, #4]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	3303      	adds	r3, #3
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	400a      	ands	r2, r1
 8000f74:	621a      	str	r2, [r3, #32]
}
 8000f76:	f000 bf22 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF5)
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	d13e      	bne.n	8000ffe <pin_af+0x338>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a1a      	ldr	r2, [r3, #32]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	791b      	ldrb	r3, [r3, #4]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	3301      	adds	r3, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	400a      	ands	r2, r1
 8000fba:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	791b      	ldrb	r3, [r3, #4]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	621a      	str	r2, [r3, #32]
}
 8000ffa:	f000 bee0 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF6)
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2b06      	cmp	r3, #6
 8001002:	d13e      	bne.n	8001082 <pin_af+0x3bc>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a1a      	ldr	r2, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	3301      	adds	r3, #1
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	4619      	mov	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	4619      	mov	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	3303      	adds	r3, #3
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	400a      	ands	r2, r1
 800107c:	621a      	str	r2, [r3, #32]
}
 800107e:	f000 be9e 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF7)
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	2b07      	cmp	r3, #7
 8001086:	d13d      	bne.n	8001104 <pin_af+0x43e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a1a      	ldr	r2, [r3, #32]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	3301      	adds	r3, #1
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	791b      	ldrb	r3, [r3, #4]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	2101      	movs	r1, #1
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	4619      	mov	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+3));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a1a      	ldr	r2, [r3, #32]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	3303      	adds	r3, #3
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	400a      	ands	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
}
 8001100:	f000 be5d 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF8)
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d13f      	bne.n	800118a <pin_af+0x4c4>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	400a      	ands	r2, r1
 8001126:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a1a      	ldr	r2, [r3, #32]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3301      	adds	r3, #1
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a1a      	ldr	r2, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	400a      	ands	r2, r1
 8001166:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3303      	adds	r3, #3
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4619      	mov	r1, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	621a      	str	r2, [r3, #32]
}
 8001186:	f000 be1a 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF9)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b09      	cmp	r3, #9
 800118e:	d13e      	bne.n	800120e <pin_af+0x548>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	3301      	adds	r3, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a1a      	ldr	r2, [r3, #32]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	791b      	ldrb	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4619      	mov	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	3303      	adds	r3, #3
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	4619      	mov	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	621a      	str	r2, [r3, #32]
}
 800120a:	f000 bdd8 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF10)
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	2b0a      	cmp	r3, #10
 8001212:	d13e      	bne.n	8001292 <pin_af+0x5cc>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	4619      	mov	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6a1a      	ldr	r2, [r3, #32]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	3301      	adds	r3, #1
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	4619      	mov	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a1a      	ldr	r2, [r3, #32]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3303      	adds	r3, #3
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4619      	mov	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	621a      	str	r2, [r3, #32]
}
 800128e:	f000 bd96 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF11)
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	2b0b      	cmp	r3, #11
 8001296:	d13d      	bne.n	8001314 <pin_af+0x64e>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a1a      	ldr	r2, [r3, #32]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a1a      	ldr	r2, [r3, #32]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	791b      	ldrb	r3, [r3, #4]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3301      	adds	r3, #1
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+2));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	791b      	ldrb	r3, [r3, #4]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4619      	mov	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3303      	adds	r3, #3
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
}
 8001310:	f000 bd55 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF12)
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d13e      	bne.n	8001398 <pin_af+0x6d2>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	4619      	mov	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	3301      	adds	r3, #1
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4619      	mov	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	4619      	mov	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	3303      	adds	r3, #3
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	621a      	str	r2, [r3, #32]
}
 8001394:	f000 bd13 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF13)
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b0d      	cmp	r3, #13
 800139c:	d13d      	bne.n	800141a <pin_af+0x754>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	791b      	ldrb	r3, [r3, #4]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL &= ~(1<<(((ret->pin)*4)+1));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	3301      	adds	r3, #1
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4619      	mov	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	400a      	ands	r2, r1
 80013d8:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	3303      	adds	r3, #3
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4619      	mov	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	621a      	str	r2, [r3, #32]
}
 8001416:	f000 bcd2 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF14)
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2b0e      	cmp	r3, #14
 800141e:	d13d      	bne.n	800149c <pin_af+0x7d6>
			ret->port->GPIOx_AFRL &= ~(1<<((ret->pin)*4));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a1a      	ldr	r2, [r3, #32]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	3301      	adds	r3, #1
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	4619      	mov	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a1a      	ldr	r2, [r3, #32]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4619      	mov	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	3303      	adds	r3, #3
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	4619      	mov	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	621a      	str	r2, [r3, #32]
}
 8001498:	f000 bc91 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF15)
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f040 848d 	bne.w	8001dbe <pin_af+0x10f8>
			ret->port->GPIOx_AFRL |= (1<<((ret->pin)*4));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+1));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	791b      	ldrb	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3301      	adds	r3, #1
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+2));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	791b      	ldrb	r3, [r3, #4]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
			ret->port->GPIOx_AFRL |= (1<<(((ret->pin)*4)+3));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6a1a      	ldr	r2, [r3, #32]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3303      	adds	r3, #3
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4619      	mov	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	621a      	str	r2, [r3, #32]
}
 800151a:	f000 bc50 	b.w	8001dbe <pin_af+0x10f8>
		if (af == AF0)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d144      	bne.n	80015ae <pin_af+0x8e8>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	791b      	ldrb	r3, [r3, #4]
 800152e:	3b08      	subs	r3, #8
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	3b08      	subs	r3, #8
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	3301      	adds	r3, #1
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	3b08      	subs	r3, #8
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	3b08      	subs	r3, #8
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	3303      	adds	r3, #3
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015aa:	f000 bc08 	b.w	8001dbe <pin_af+0x10f8>
		else if (af == AF1)
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d142      	bne.n	800163a <pin_af+0x974>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	3b08      	subs	r3, #8
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	3b08      	subs	r3, #8
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	3301      	adds	r3, #1
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	3b08      	subs	r3, #8
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	2101      	movs	r1, #1
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	791b      	ldrb	r3, [r3, #4]
 8001620:	3b08      	subs	r3, #8
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3303      	adds	r3, #3
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	400a      	ands	r2, r1
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001638:	e3c1      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF2)
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d142      	bne.n	80016c6 <pin_af+0xa00>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	3b08      	subs	r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	791b      	ldrb	r3, [r3, #4]
 800166a:	3b08      	subs	r3, #8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	3301      	adds	r3, #1
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	4619      	mov	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	3b08      	subs	r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	400a      	ands	r2, r1
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	3b08      	subs	r3, #8
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	3303      	adds	r3, #3
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	400a      	ands	r2, r1
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016c4:	e37b      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF3)
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d141      	bne.n	8001750 <pin_af+0xa8a>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	3b08      	subs	r3, #8
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	3b08      	subs	r3, #8
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	3301      	adds	r3, #1
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4619      	mov	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	3b08      	subs	r3, #8
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	400a      	ands	r2, r1
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	3b08      	subs	r3, #8
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3303      	adds	r3, #3
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800174e:	e336      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF4)
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d142      	bne.n	80017dc <pin_af+0xb16>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	3b08      	subs	r3, #8
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	400a      	ands	r2, r1
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	3b08      	subs	r3, #8
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3301      	adds	r3, #1
 8001786:	2101      	movs	r1, #1
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	3b08      	subs	r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	4619      	mov	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	3303      	adds	r3, #3
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	400a      	ands	r2, r1
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017da:	e2f0      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF5)
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d141      	bne.n	8001866 <pin_af+0xba0>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	3b08      	subs	r3, #8
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	2101      	movs	r1, #1
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	791b      	ldrb	r3, [r3, #4]
 800180a:	3b08      	subs	r3, #8
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	3301      	adds	r3, #1
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	400a      	ands	r2, r1
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	3b08      	subs	r3, #8
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4619      	mov	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	3b08      	subs	r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	3303      	adds	r3, #3
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4619      	mov	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	400a      	ands	r2, r1
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001864:	e2ab      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF6)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	2b06      	cmp	r3, #6
 800186a:	d141      	bne.n	80018f0 <pin_af+0xc2a>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	3b08      	subs	r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	3b08      	subs	r3, #8
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	3301      	adds	r3, #1
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	3b08      	subs	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	2101      	movs	r1, #1
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	791b      	ldrb	r3, [r3, #4]
 80018d6:	3b08      	subs	r3, #8
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	3303      	adds	r3, #3
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4619      	mov	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018ee:	e266      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF7)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d140      	bne.n	8001978 <pin_af+0xcb2>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	791b      	ldrb	r3, [r3, #4]
 8001900:	3b08      	subs	r3, #8
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	4619      	mov	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	3b08      	subs	r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3301      	adds	r3, #1
 8001924:	2101      	movs	r1, #1
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	4619      	mov	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+3));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	791b      	ldrb	r3, [r3, #4]
 800195e:	3b08      	subs	r3, #8
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	3303      	adds	r3, #3
 8001964:	2101      	movs	r1, #1
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001976:	e222      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF8)
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d142      	bne.n	8001a04 <pin_af+0xd3e>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	3b08      	subs	r3, #8
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	400a      	ands	r2, r1
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	3b08      	subs	r3, #8
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	3301      	adds	r3, #1
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	791b      	ldrb	r3, [r3, #4]
 80019ca:	3b08      	subs	r3, #8
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	400a      	ands	r2, r1
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	3b08      	subs	r3, #8
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3303      	adds	r3, #3
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a02:	e1dc      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF9)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b09      	cmp	r3, #9
 8001a08:	d141      	bne.n	8001a8e <pin_af+0xdc8>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	791b      	ldrb	r3, [r3, #4]
 8001a14:	3b08      	subs	r3, #8
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	3b08      	subs	r3, #8
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	3301      	adds	r3, #1
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	400a      	ands	r2, r1
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	3b08      	subs	r3, #8
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	3b08      	subs	r3, #8
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3303      	adds	r3, #3
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a8c:	e197      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF10)
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d141      	bne.n	8001b18 <pin_af+0xe52>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	3b08      	subs	r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4619      	mov	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	400a      	ands	r2, r1
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	791b      	ldrb	r3, [r3, #4]
 8001b00:	3b08      	subs	r3, #8
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	3303      	adds	r3, #3
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b16:	e152      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF11)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b0b      	cmp	r3, #11
 8001b1c:	d140      	bne.n	8001ba0 <pin_af+0xeda>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	3b08      	subs	r3, #8
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	3b08      	subs	r3, #8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+2));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	3b08      	subs	r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b9e:	e10e      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF12)
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d141      	bne.n	8001c2a <pin_af+0xf64>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	3b08      	subs	r3, #8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	791b      	ldrb	r3, [r3, #4]
 8001bf2:	3b08      	subs	r3, #8
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	791b      	ldrb	r3, [r3, #4]
 8001c12:	3b08      	subs	r3, #8
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	3303      	adds	r3, #3
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c28:	e0c9      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF13)
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	2b0d      	cmp	r3, #13
 8001c2e:	d140      	bne.n	8001cb2 <pin_af+0xfec>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4619      	mov	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH &= ~(1<<((((ret->pin)-8)*4)+1));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	3b08      	subs	r3, #8
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	3b08      	subs	r3, #8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001cb0:	e085      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF14)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	2b0e      	cmp	r3, #14
 8001cb6:	d140      	bne.n	8001d3a <pin_af+0x1074>
			ret->port->GPIOx_AFRH &= ~(1<<(((ret->pin)-8)*4));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	791b      	ldrb	r3, [r3, #4]
 8001ce2:	3b08      	subs	r3, #8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	791b      	ldrb	r3, [r3, #4]
 8001d02:	3b08      	subs	r3, #8
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	3b08      	subs	r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3303      	adds	r3, #3
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d38:	e041      	b.n	8001dbe <pin_af+0x10f8>
		else if (af == AF15)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d13e      	bne.n	8001dbe <pin_af+0x10f8>
			ret->port->GPIOx_AFRH |= (1<<(((ret->pin)-8)*4));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+1));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	791b      	ldrb	r3, [r3, #4]
 8001d68:	3b08      	subs	r3, #8
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+2));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	791b      	ldrb	r3, [r3, #4]
 8001d88:	3b08      	subs	r3, #8
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	4619      	mov	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
			ret->port->GPIOx_AFRH |= (1<<((((ret->pin)-8)*4)+3));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	3b08      	subs	r3, #8
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3303      	adds	r3, #3
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	f200 80f6 	bhi.w	8001fc6 <AHB_PRE_SELECT+0x1fe>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <AHB_PRE_SELECT+0x18>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e05 	.word	0x08001e05
 8001de4:	08001e37 	.word	0x08001e37
 8001de8:	08001e69 	.word	0x08001e69
 8001dec:	08001e9b 	.word	0x08001e9b
 8001df0:	08001ecd 	.word	0x08001ecd
 8001df4:	08001eff 	.word	0x08001eff
 8001df8:	08001f31 	.word	0x08001f31
 8001dfc:	08001f63 	.word	0x08001f63
 8001e00:	08001f95 	.word	0x08001f95
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e0a:	f023 0310 	bic.w	r3, r3, #16
 8001e0e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001e10:	4b7c      	ldr	r3, [pc, #496]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a7b      	ldr	r2, [pc, #492]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e16:	f023 0320 	bic.w	r3, r3, #32
 8001e1a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001e1c:	4b79      	ldr	r3, [pc, #484]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a78      	ldr	r2, [pc, #480]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e26:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8001e28:	4b76      	ldr	r3, [pc, #472]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a75      	ldr	r2, [pc, #468]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e32:	6093      	str	r3, [r2, #8]
		break;
 8001e34:	e0e0      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001e36:	4b73      	ldr	r3, [pc, #460]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a72      	ldr	r2, [pc, #456]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e3c:	f023 0310 	bic.w	r3, r3, #16
 8001e40:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e48:	f023 0320 	bic.w	r3, r3, #32
 8001e4c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e58:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001e5a:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	6093      	str	r3, [r2, #8]
		break;
 8001e66:	e0c7      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001e74:	4b63      	ldr	r3, [pc, #396]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a62      	ldr	r2, [pc, #392]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e7a:	f023 0320 	bic.w	r3, r3, #32
 8001e7e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e8a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4a5c      	ldr	r2, [pc, #368]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e96:	6093      	str	r3, [r2, #8]
		break;
 8001e98:	e0ae      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4a59      	ldr	r2, [pc, #356]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ea0:	f023 0310 	bic.w	r3, r3, #16
 8001ea4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4a56      	ldr	r2, [pc, #344]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001eac:	f043 0320 	orr.w	r3, r3, #32
 8001eb0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4a53      	ldr	r2, [pc, #332]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ebc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4a50      	ldr	r2, [pc, #320]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	6093      	str	r3, [r2, #8]
		break;
 8001eca:	e095      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001ecc:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001ed8:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a49      	ldr	r2, [pc, #292]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a46      	ldr	r2, [pc, #280]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eee:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001ef0:	4b44      	ldr	r3, [pc, #272]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a43      	ldr	r2, [pc, #268]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efa:	6093      	str	r3, [r2, #8]
		break;
 8001efc:	e07c      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f04:	f023 0310 	bic.w	r3, r3, #16
 8001f08:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f10:	f023 0320 	bic.w	r3, r3, #32
 8001f14:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f20:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4a37      	ldr	r2, [pc, #220]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	6093      	str	r3, [r2, #8]
		break;
 8001f2e:	e063      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a33      	ldr	r2, [pc, #204]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a30      	ldr	r2, [pc, #192]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f42:	f023 0320 	bic.w	r3, r3, #32
 8001f46:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f52:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a2a      	ldr	r2, [pc, #168]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5e:	6093      	str	r3, [r2, #8]
		break;
 8001f60:	e04a      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a27      	ldr	r2, [pc, #156]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f68:	f023 0310 	bic.w	r3, r3, #16
 8001f6c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4a24      	ldr	r2, [pc, #144]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a21      	ldr	r2, [pc, #132]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f84:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	6093      	str	r3, [r2, #8]
		break;
 8001f92:	e031      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc2:	6093      	str	r3, [r2, #8]
		break;
 8001fc4:	e018      	b.n	8001ff8 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fcc:	f023 0310 	bic.w	r3, r3, #16
 8001fd0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fd8:	f023 0320 	bic.w	r3, r3, #32
 8001fdc:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fe8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <AHB_PRE_SELECT+0x23c>)
 8001ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff4:	6093      	str	r3, [r2, #8]
		break;
 8001ff6:	bf00      	nop
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d86c      	bhi.n	80020f2 <APB1_PRE_SELECT+0xea>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <APB1_PRE_SELECT+0x18>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002035 	.word	0x08002035
 8002024:	0800205b 	.word	0x0800205b
 8002028:	08002081 	.word	0x08002081
 800202c:	080020a7 	.word	0x080020a7
 8002030:	080020cd 	.word	0x080020cd
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800203a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800203e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a2e      	ldr	r2, [pc, #184]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800204a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002056:	6093      	str	r3, [r2, #8]
		break;
 8002058:	e04c      	b.n	80020f4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002064:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800206c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002070:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207c:	6093      	str	r3, [r2, #8]
		break;
 800207e:	e039      	b.n	80020f4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 8002092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002096:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 800209e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a2:	6093      	str	r3, [r2, #8]
		break;
 80020a4:	e026      	b.n	80020f4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020bc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c8:	6093      	str	r3, [r2, #8]
		break;
 80020ca:	e013      	b.n	80020f4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a08      	ldr	r2, [pc, #32]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <APB1_PRE_SELECT+0xf8>)
 80020ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ee:	6093      	str	r3, [r2, #8]
		break;
 80020f0:	e000      	b.n	80020f4 <APB1_PRE_SELECT+0xec>
	default:
		break;
 80020f2:	bf00      	nop
	}
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d86c      	bhi.n	80021ee <APB2_PRE_SELECT+0xea>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <APB2_PRE_SELECT+0x18>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	08002131 	.word	0x08002131
 8002120:	08002157 	.word	0x08002157
 8002124:	0800217d 	.word	0x0800217d
 8002128:	080021a3 	.word	0x080021a3
 800212c:	080021c9 	.word	0x080021c9
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800213a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002146:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800214e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002152:	6093      	str	r3, [r2, #8]
		break;
 8002154:	e04c      	b.n	80021f0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a28      	ldr	r2, [pc, #160]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800215c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002160:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4a25      	ldr	r2, [pc, #148]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4a22      	ldr	r2, [pc, #136]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002178:	6093      	str	r3, [r2, #8]
		break;
 800217a:	e039      	b.n	80021f0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002186:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800218e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002192:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 800219a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219e:	6093      	str	r3, [r2, #8]
		break;
 80021a0:	e026      	b.n	80021f0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021ac:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c4:	6093      	str	r3, [r2, #8]
		break;
 80021c6:	e013      	b.n	80021f0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a08      	ldr	r2, [pc, #32]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021de:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <APB2_PRE_SELECT+0xf8>)
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ea:	6093      	str	r3, [r2, #8]
		break;
 80021ec:	e000      	b.n	80021f0 <APB2_PRE_SELECT+0xec>
	default:
		break;
 80021ee:	bf00      	nop
	}
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <rcc_sys_init_pllr_32MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
}

void rcc_sys_init_pllr_32MHz_all(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 64 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800220a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800220e:	6053      	str	r3, [r2, #4]

	//Q = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 8002210:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a5a      	ldr	r2, [pc, #360]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800221a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ1);
 800221c:	4b58      	ldr	r3, [pc, #352]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a57      	ldr	r2, [pc, #348]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002226:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ2);
 8002228:	4b55      	ldr	r3, [pc, #340]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800222e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002232:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a51      	ldr	r2, [pc, #324]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800223a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800223e:	6053      	str	r3, [r2, #4]

	//R = 2 >> 0b0010
	clr_bit(RCC->RCC_PLLCFGR,PLLR0);
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLR1);
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002256:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLR2);
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800225e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002262:	6053      	str	r3, [r2, #4]

	//N = 64 >> 0b00100 0000
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a45      	ldr	r2, [pc, #276]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800226a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN2);
 800227c:	4b40      	ldr	r3, [pc, #256]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a3f      	ldr	r2, [pc, #252]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002286:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800228e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002292:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN4);
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800229a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800229e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a36      	ldr	r2, [pc, #216]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022aa:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022b6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ce:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022e2:	f023 0302 	bic.w	r3, r3, #2
 80022e6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022ee:	f023 0304 	bic.w	r3, r3, #4
 80022f2:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002306:	f023 0310 	bic.w	r3, r3, #16
 800230a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002312:	f023 0320 	bic.w	r3, r3, #32
 8002316:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 32MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff fd55 	bl	8001dc8 <AHB_PRE_SELECT>

	//APB1 prescaler /1  32MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff fe72 	bl	8002008 <APB1_PRE_SELECT>

	//APB2 prescaler /1  32MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff feed 	bl	8002104 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a14      	ldr	r2, [pc, #80]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002334:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8002336:	bf00      	nop
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f9      	beq.n	8002338 <rcc_sys_init_pllr_32MHz_all+0x138>

	//System clock switch >> HSI oscillator selected as system clock
	set_bit(RCC->RCC_CFGR,SW0);
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
 800235c:	bf00      	nop
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	f003 0202 	and.w	r2, r3, #2
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <rcc_sys_init_pllr_32MHz_all+0x180>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	4313      	orrs	r3, r2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d1f1      	bne.n	800235e <rcc_sys_init_pllr_32MHz_all+0x15e>
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800

08002384 <rcc_ahb1_clk_enable>:

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <rcc_ahb1_clk_enable+0x28>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4a03      	ldr	r2, [pc, #12]	; (80023ac <rcc_ahb1_clk_enable+0x28>)
 800239e:	430b      	orrs	r3, r1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40023800 	.word	0x40023800

080023b0 <rcc_apb1_clk_enable>:
void rcc_ahb3_clk_enable(rcc_ahb3_peripherals peripheral)
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}
void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <rcc_apb1_clk_enable+0x28>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	79fa      	ldrb	r2, [r7, #7]
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4611      	mov	r1, r2
 80023c8:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <rcc_apb1_clk_enable+0x28>)
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40023800 	.word	0x40023800

080023dc <usart_init>:
 */

#include "uart.h"

void usart_init(volatile uart_registers_t* usart,usart_parity_t parity,usart_stop_t stop_bit, uint32_t baud_rate,uint32_t Freq_clk,usart_mode_int_t int_mode )
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	72fb      	strb	r3, [r7, #11]
 80023ea:	4613      	mov	r3, r2
 80023ec:	72bb      	strb	r3, [r7, #10]
	//Bit 15 OVER8: Oversampling mode == 0: oversampling by 16
	usart->USART_CR1 &= ~(1<<OVER8);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	60da      	str	r2, [r3, #12]

	//Bit 13 UE: USART enable = 1: USART enabled
	usart->USART_CR1 |= (1<<UE);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60da      	str	r2, [r3, #12]

	// Parity control enable  || Parity control disable

	if (parity == usart_parity_enable)
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <usart_init+0x3e>
	{
		//Bit 10 PCE: Parity control enable == 1: Parity control enabled
		usart->USART_CR1 |= (1<<PCE);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e005      	b.n	8002426 <usart_init+0x4a>
	}

	else
	{
		//Bit 10 PCE: Parity control enable == 0: Parity control disabled
		usart->USART_CR1 &= ~(1<<PCE);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	60da      	str	r2, [r3, #12]
	}

	// 	Bit 9 PS: Parity selection == 0: Even parity
	usart->USART_CR1 &= ~(1<<PS);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	60da      	str	r2, [r3, #12]

	//STOP bits These bits are used for programming the stop bits

	if (stop_bit == usart_stop_1)
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10c      	bne.n	8002452 <usart_init+0x76>
	{
		//Bits 13:12 STOP: 00: 1 Stop bit
		usart->USART_CR2 &= ~(1<<STOP0);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	611a      	str	r2, [r3, #16]
		usart->USART_CR2 &= ~(1<<STOP1);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	e00b      	b.n	800246a <usart_init+0x8e>
	}

	else
	{
		//Bits 13:12 STOP: 10: 2 Stop bits
		usart->USART_CR2 &= ~(1<<STOP0);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	611a      	str	r2, [r3, #16]
		usart->USART_CR2 |= (1<<STOP1);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	611a      	str	r2, [r3, #16]
	}

	//Baud rate Calculation
	// usartdiv float number
	double usartdiv =  ( ( (double) Freq_clk) / ( (double) (16 * baud_rate) ) );
 800246a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800246c:	f7fe f80c 	bl	8000488 <__aeabi_ui2d>
 8002470:	4604      	mov	r4, r0
 8002472:	460d      	mov	r5, r1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f805 	bl	8000488 <__aeabi_ui2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4620      	mov	r0, r4
 8002484:	4629      	mov	r1, r5
 8002486:	f7fe f9a3 	bl	80007d0 <__aeabi_ddiv>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//1- need to convert to real number to get real number alone
	uint32_t div_mantissa = (uint32_t)usartdiv ;
 8002492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002496:	f7fe fa83 	bl	80009a0 <__aeabi_d2uiz>
 800249a:	4603      	mov	r3, r0
 800249c:	617b      	str	r3, [r7, #20]

	//2- we subtract  real number to floating .
	uint32_t div_fraction = ((uint32_t)( (usartdiv-div_mantissa) * 16) );
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7fd fff2 	bl	8000488 <__aeabi_ui2d>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ac:	f7fd feae 	bl	800020c <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <usart_init+0x1c0>)
 80024be:	f7fe f85d 	bl	800057c <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fa69 	bl	80009a0 <__aeabi_d2uiz>
 80024ce:	4603      	mov	r3, r0
 80024d0:	613b      	str	r3, [r7, #16]

	// usart->USART_BRR == zero
	usart->USART_BRR = 0 ;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
	//3- save float number in bits [3:0]
	usart->USART_BRR |= (div_fraction<< 0);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

	//4- save real number in bits [15:4]
	usart->USART_BRR |= (div_mantissa<< 4);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]





	if (int_mode == usart_mode_no_int )
 80024f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <usart_init+0x138>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<TXEIE);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<RXNEIE);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f023 0220 	bic.w	r2, r3, #32
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	e032      	b.n	800257a <usart_init+0x19e>


	}
	else if (int_mode == usart_mode_tx_int)
 8002514:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <usart_init+0x14e>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 1: An USART interrupt is generated whenever TXE=1 in the USART_SR register
		usart->USART_CR1 |= (1<<TXEIE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	e027      	b.n	800257a <usart_init+0x19e>
	}
	else if (int_mode == usart_mode_rx_int)
 800252a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800252e:	2b02      	cmp	r3, #2
 8002530:	d106      	bne.n	8002540 <usart_init+0x164>
	{
		//Bit 5 RXNEIE: RXNE interrupt enable == 1: An USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR
		usart->USART_CR1 |= (1<<RXNEIE);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	e01c      	b.n	800257a <usart_init+0x19e>
	}
	else if (int_mode == usart_mode_txrx_int)
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b03      	cmp	r3, #3
 8002546:	d10c      	bne.n	8002562 <usart_init+0x186>
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 1: An USART interrupt is generated whenever TXE=1 in the USART_SR register
		usart->USART_CR1 |= (1<<TXEIE);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 1: An USART interrupt is generated whenever ORE=1 or RXNE=1 in the USART_SR
		usart->USART_CR1 |= (1<<RXNEIE);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	e00b      	b.n	800257a <usart_init+0x19e>

	}
	else
	{
		//Bit 7 TXEIE: TXE interrupt enable  == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<TXEIE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	60da      	str	r2, [r3, #12]

		//Bit 5 RXNEIE: RXNE interrupt enable == 0: Interrupt is inhibited
		usart->USART_CR1 &= ~(1<<RXNEIE);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f023 0220 	bic.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	60da      	str	r2, [r3, #12]

	}

	//Bit 3 TE: Transmitter enable == 1: Transmitter is enabled
	usart->USART_CR1 |= (1<<TE);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f043 0208 	orr.w	r2, r3, #8
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	60da      	str	r2, [r3, #12]

	//Bit 2 RE: Receiver enable == 1: Receiver is enabled and begins searching for a start bit
	usart->USART_CR1 |= (1<<RE);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f043 0204 	orr.w	r2, r3, #4
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	60da      	str	r2, [r3, #12]


}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bdb0      	pop	{r4, r5, r7, pc}
 800259a:	bf00      	nop
 800259c:	40300000 	.word	0x40300000

080025a0 <usart_write>:

void usart_write(volatile uart_registers_t* usart,uint8_t data)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]


	// wait TXE Flag Set ( Note: This bit is used during single buffer transmission)
	while (((usart->USART_SR>>TXE)&1) !=0);
 80025ac:	bf00      	nop
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <usart_write+0xe>

	// write data in register DR[8:0]: Data value
	usart->USART_DR = data ;
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
	// now wait until Bit 6 TC: Transmission complete
	//while (((usart->USART_SR>>TC)&1) !=0);

	//Bit 3 TE: Transmitter enable == 0: Transmitter is disabled
	//usart->USART_CR1 &= ~(1<<TE);
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <main>:




int main(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af02      	add	r7, sp, #8

	pin_t pin_tx ;
	pin_t pin_rx ;


	rcc_sys_init_pllr_32MHz_all();
 80025d2:	f7ff fe15 	bl	8002200 <rcc_sys_init_pllr_32MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff fed4 	bl	8002384 <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_USART2);
 80025dc:	2011      	movs	r0, #17
 80025de:	f7ff fee7 	bl	80023b0 <rcc_apb1_clk_enable>

	pin_tx = pin_init(GPIOA,gpio_pin2 ,pin_mode_alternate_fun,pin_push_pull , gpio_null);
 80025e2:	4638      	mov	r0, r7
 80025e4:	23ff      	movs	r3, #255	; 0xff
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2302      	movs	r3, #2
 80025ee:	2202      	movs	r2, #2
 80025f0:	491a      	ldr	r1, [pc, #104]	; (800265c <main+0x90>)
 80025f2:	f7fe fb36 	bl	8000c62 <pin_init>
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	463a      	mov	r2, r7
 80025fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80025fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pin_rx = pin_init(GPIOA,gpio_pin3 ,pin_mode_alternate_fun,pin_open_drain , gpio_null);
 8002602:	4638      	mov	r0, r7
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2301      	movs	r3, #1
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2302      	movs	r3, #2
 800260e:	2203      	movs	r2, #3
 8002610:	4912      	ldr	r1, [pc, #72]	; (800265c <main+0x90>)
 8002612:	f7fe fb26 	bl	8000c62 <pin_init>
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	463a      	mov	r2, r7
 800261c:	ca07      	ldmia	r2, {r0, r1, r2}
 800261e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	pin_af(&pin_rx, AF7);
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	2107      	movs	r1, #7
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fb4c 	bl	8000cc6 <pin_af>
	pin_af(&pin_tx, AF7);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	2107      	movs	r1, #7
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fb46 	bl	8000cc6 <pin_af>


	 usart_init(USART2, usart_parity_disable, usart_stop_1, 9600, 32000000, usart_mode_no_int);
 800263a:	2300      	movs	r3, #0
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <main+0x94>)
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	4806      	ldr	r0, [pc, #24]	; (8002664 <main+0x98>)
 800264c:	f7ff fec6 	bl	80023dc <usart_init>

	/* Loop forever */
	while (1)
	{
		usart_write(USART2, 'M');
 8002650:	214d      	movs	r1, #77	; 0x4d
 8002652:	4804      	ldr	r0, [pc, #16]	; (8002664 <main+0x98>)
 8002654:	f7ff ffa4 	bl	80025a0 <usart_write>
 8002658:	e7fa      	b.n	8002650 <main+0x84>
 800265a:	bf00      	nop
 800265c:	40020000 	.word	0x40020000
 8002660:	01e84800 	.word	0x01e84800
 8002664:	40004400 	.word	0x40004400

08002668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002668:	480d      	ldr	r0, [pc, #52]	; (80026a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800266a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800266c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <LoopForever+0xe>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002678:	e002      	b.n	8002680 <LoopCopyDataInit>

0800267a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800267a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800267c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267e:	3304      	adds	r3, #4

08002680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002684:	d3f9      	bcc.n	800267a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002688:	4c0a      	ldr	r4, [pc, #40]	; (80026b4 <LoopForever+0x16>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800268c:	e001      	b.n	8002692 <LoopFillZerobss>

0800268e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002690:	3204      	adds	r2, #4

08002692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002694:	d3fb      	bcc.n	800268e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002696:	f000 f811 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800269a:	f7ff ff97 	bl	80025cc <main>

0800269e <LoopForever>:

LoopForever:
  b LoopForever
 800269e:	e7fe      	b.n	800269e <LoopForever>
  ldr   r0, =_estack
 80026a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80026ac:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 80026b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80026b4:	20000020 	.word	0x20000020

080026b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC_IRQHandler>
	...

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4d0d      	ldr	r5, [pc, #52]	; (80026f4 <__libc_init_array+0x38>)
 80026c0:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	2600      	movs	r6, #0
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	4d0b      	ldr	r5, [pc, #44]	; (80026fc <__libc_init_array+0x40>)
 80026ce:	4c0c      	ldr	r4, [pc, #48]	; (8002700 <__libc_init_array+0x44>)
 80026d0:	f000 f818 	bl	8002704 <_init>
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	2600      	movs	r6, #0
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	0800271c 	.word	0x0800271c
 80026f8:	0800271c 	.word	0x0800271c
 80026fc:	0800271c 	.word	0x0800271c
 8002700:	08002720 	.word	0x08002720

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
